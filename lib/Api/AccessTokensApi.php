<?php
/**
 * AccessTokensApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * API Manager Portal
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\Configuration;
use \Swagger\Client\ObjectSerializer;

/**
 * AccessTokensApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AccessTokensApi
{
    /**
     * API Client
     *
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Swagger\Client\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     *
     * @return AccessTokensApi
     */
    public function setApiClient(\Swagger\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation accessTokenCount1
     *
     * Retrieve access token total
     *
     * @param string $sensedia_auth Sensedia-Auth (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return int
     */
    public function accessTokenCount1($sensedia_auth = null)
    {
        list($response) = $this->accessTokenCount1WithHttpInfo($sensedia_auth);
        return $response;
    }

    /**
     * Operation accessTokenCount1WithHttpInfo
     *
     * Retrieve access token total
     *
     * @param string $sensedia_auth Sensedia-Auth (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of int, HTTP status code, HTTP response headers (array of strings)
     */
    public function accessTokenCount1WithHttpInfo($sensedia_auth = null)
    {
        // parse inputs
        $resourcePath = "/access-tokens/count";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // header params
        if ($sensedia_auth !== null) {
            $headerParams['Sensedia-Auth'] = $this->apiClient->getSerializer()->toHeaderValue($sensedia_auth);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                'int',
                '/access-tokens/count'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, 'int', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'int', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createAccessToken1
     *
     * Create a new access token
     *
     * @param string $sensedia_auth Sensedia-Auth (optional)
     * @param \Swagger\Client\Model\AccessToken $bean Access token json to create a new access token. (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\AccessToken
     */
    public function createAccessToken1($sensedia_auth = null, $bean = null)
    {
        list($response) = $this->createAccessToken1WithHttpInfo($sensedia_auth, $bean);
        return $response;
    }

    /**
     * Operation createAccessToken1WithHttpInfo
     *
     * Create a new access token
     *
     * @param string $sensedia_auth Sensedia-Auth (optional)
     * @param \Swagger\Client\Model\AccessToken $bean Access token json to create a new access token. (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\AccessToken, HTTP status code, HTTP response headers (array of strings)
     */
    public function createAccessToken1WithHttpInfo($sensedia_auth = null, $bean = null)
    {
        // parse inputs
        $resourcePath = "/access-tokens";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // header params
        if ($sensedia_auth !== null) {
            $headerParams['Sensedia-Auth'] = $this->apiClient->getSerializer()->toHeaderValue($sensedia_auth);
        }
        // body params
        $_tempBody = null;
        if (isset($bean)) {
            $_tempBody = $bean;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\AccessToken',
                '/access-tokens'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\AccessToken', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\AccessToken', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\AccessToken', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getAccessToken1
     *
     * Find access token list by filters
     *
     * @param string $sensedia_auth Sensedia-Auth (optional)
     * @param string $code code (optional)
     * @param string $owner owner (optional)
     * @param string $status staus(ACTIVE, REVOKED, EXPIRED) (optional)
     * @param int $expires_in Expires in millisecond (optional)
     * @param string $refresh_token Refresh code (optional)
     * @param string $scope Scope (optional)
     * @param string $keyword Keyword to find between code or owner (optional)
     * @param int $actual_page Number of the page in pagination. The starting page number is zero. (optional)
     * @param int $page_size Define the size of the returned list of developers. (optional)
     * @param string $auth_ids Id access token separated by space. Ex:(1 3 6 8) (optional)
     * @param string $begin_date Begin date (optional)
     * @param string $end_date End date (optional)
     * @param string $extra_fields Extra field separated by comma (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\AccessToken[]
     */
    public function getAccessToken1($sensedia_auth = null, $code = null, $owner = null, $status = null, $expires_in = null, $refresh_token = null, $scope = null, $keyword = null, $actual_page = null, $page_size = null, $auth_ids = null, $begin_date = null, $end_date = null, $extra_fields = null)
    {
        list($response) = $this->getAccessToken1WithHttpInfo($sensedia_auth, $code, $owner, $status, $expires_in, $refresh_token, $scope, $keyword, $actual_page, $page_size, $auth_ids, $begin_date, $end_date, $extra_fields);
        return $response;
    }

    /**
     * Operation getAccessToken1WithHttpInfo
     *
     * Find access token list by filters
     *
     * @param string $sensedia_auth Sensedia-Auth (optional)
     * @param string $code code (optional)
     * @param string $owner owner (optional)
     * @param string $status staus(ACTIVE, REVOKED, EXPIRED) (optional)
     * @param int $expires_in Expires in millisecond (optional)
     * @param string $refresh_token Refresh code (optional)
     * @param string $scope Scope (optional)
     * @param string $keyword Keyword to find between code or owner (optional)
     * @param int $actual_page Number of the page in pagination. The starting page number is zero. (optional)
     * @param int $page_size Define the size of the returned list of developers. (optional)
     * @param string $auth_ids Id access token separated by space. Ex:(1 3 6 8) (optional)
     * @param string $begin_date Begin date (optional)
     * @param string $end_date End date (optional)
     * @param string $extra_fields Extra field separated by comma (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\AccessToken[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getAccessToken1WithHttpInfo($sensedia_auth = null, $code = null, $owner = null, $status = null, $expires_in = null, $refresh_token = null, $scope = null, $keyword = null, $actual_page = null, $page_size = null, $auth_ids = null, $begin_date = null, $end_date = null, $extra_fields = null)
    {
        // parse inputs
        $resourcePath = "/access-tokens";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($code !== null) {
            $queryParams['code'] = $this->apiClient->getSerializer()->toQueryValue($code);
        }
        // query params
        if ($owner !== null) {
            $queryParams['owner'] = $this->apiClient->getSerializer()->toQueryValue($owner);
        }
        // query params
        if ($status !== null) {
            $queryParams['status'] = $this->apiClient->getSerializer()->toQueryValue($status);
        }
        // query params
        if ($expires_in !== null) {
            $queryParams['expiresIn'] = $this->apiClient->getSerializer()->toQueryValue($expires_in);
        }
        // query params
        if ($refresh_token !== null) {
            $queryParams['refreshToken'] = $this->apiClient->getSerializer()->toQueryValue($refresh_token);
        }
        // query params
        if ($scope !== null) {
            $queryParams['scope'] = $this->apiClient->getSerializer()->toQueryValue($scope);
        }
        // query params
        if ($keyword !== null) {
            $queryParams['keyword'] = $this->apiClient->getSerializer()->toQueryValue($keyword);
        }
        // query params
        if ($actual_page !== null) {
            $queryParams['actualPage'] = $this->apiClient->getSerializer()->toQueryValue($actual_page);
        }
        // query params
        if ($page_size !== null) {
            $queryParams['pageSize'] = $this->apiClient->getSerializer()->toQueryValue($page_size);
        }
        // query params
        if ($auth_ids !== null) {
            $queryParams['authIds'] = $this->apiClient->getSerializer()->toQueryValue($auth_ids);
        }
        // query params
        if ($begin_date !== null) {
            $queryParams['beginDate'] = $this->apiClient->getSerializer()->toQueryValue($begin_date);
        }
        // query params
        if ($end_date !== null) {
            $queryParams['endDate'] = $this->apiClient->getSerializer()->toQueryValue($end_date);
        }
        // query params
        if ($extra_fields !== null) {
            $queryParams['extraFields'] = $this->apiClient->getSerializer()->toQueryValue($extra_fields);
        }
        // header params
        if ($sensedia_auth !== null) {
            $headerParams['Sensedia-Auth'] = $this->apiClient->getSerializer()->toHeaderValue($sensedia_auth);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\AccessToken[]',
                '/access-tokens'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\AccessToken[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\AccessToken[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getChangeLogByAccessTokenId1
     *
     * Retrive changelog per access token id
     *
     * @param int $id Access token id (required)
     * @param string $sensedia_auth Sensedia-Auth (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\ChangeLogBean[]
     */
    public function getChangeLogByAccessTokenId1($id, $sensedia_auth = null)
    {
        list($response) = $this->getChangeLogByAccessTokenId1WithHttpInfo($id, $sensedia_auth);
        return $response;
    }

    /**
     * Operation getChangeLogByAccessTokenId1WithHttpInfo
     *
     * Retrive changelog per access token id
     *
     * @param int $id Access token id (required)
     * @param string $sensedia_auth Sensedia-Auth (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\ChangeLogBean[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getChangeLogByAccessTokenId1WithHttpInfo($id, $sensedia_auth = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling getChangeLogByAccessTokenId1');
        }
        // parse inputs
        $resourcePath = "/access-tokens/{id}/changelog";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['*/*']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // header params
        if ($sensedia_auth !== null) {
            $headerParams['Sensedia-Auth'] = $this->apiClient->getSerializer()->toHeaderValue($sensedia_auth);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ChangeLogBean[]',
                '/access-tokens/{id}/changelog'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ChangeLogBean[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ChangeLogBean[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getTokenByCode1
     *
     * Find access token by code
     *
     * @param string $code Code (required)
     * @param string $sensedia_auth Sensedia-Auth (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\AccessToken
     */
    public function getTokenByCode1($code, $sensedia_auth = null)
    {
        list($response) = $this->getTokenByCode1WithHttpInfo($code, $sensedia_auth);
        return $response;
    }

    /**
     * Operation getTokenByCode1WithHttpInfo
     *
     * Find access token by code
     *
     * @param string $code Code (required)
     * @param string $sensedia_auth Sensedia-Auth (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\AccessToken, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTokenByCode1WithHttpInfo($code, $sensedia_auth = null)
    {
        // verify the required parameter 'code' is set
        if ($code === null) {
            throw new \InvalidArgumentException('Missing the required parameter $code when calling getTokenByCode1');
        }
        // parse inputs
        $resourcePath = "/access-tokens/{code}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['*/*']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // header params
        if ($sensedia_auth !== null) {
            $headerParams['Sensedia-Auth'] = $this->apiClient->getSerializer()->toHeaderValue($sensedia_auth);
        }
        // path params
        if ($code !== null) {
            $resourcePath = str_replace(
                "{" . "code" . "}",
                $this->apiClient->getSerializer()->toPathValue($code),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\AccessToken',
                '/access-tokens/{code}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\AccessToken', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\AccessToken', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation removeAccessToken1
     *
     * Remove a access token
     *
     * @param string $id App id (required)
     * @param string $sensedia_auth Sensedia-Auth (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function removeAccessToken1($id, $sensedia_auth = null)
    {
        list($response) = $this->removeAccessToken1WithHttpInfo($id, $sensedia_auth);
        return $response;
    }

    /**
     * Operation removeAccessToken1WithHttpInfo
     *
     * Remove a access token
     *
     * @param string $id App id (required)
     * @param string $sensedia_auth Sensedia-Auth (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function removeAccessToken1WithHttpInfo($id, $sensedia_auth = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling removeAccessToken1');
        }
        // parse inputs
        $resourcePath = "/access-tokens/{id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['*/*']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // header params
        if ($sensedia_auth !== null) {
            $headerParams['Sensedia-Auth'] = $this->apiClient->getSerializer()->toHeaderValue($sensedia_auth);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/access-tokens/{id}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation updateAccesstoken1
     *
     * Update a access token
     *
     * @param string $id Access token id (required)
     * @param string $sensedia_auth Sensedia-Auth (optional)
     * @param \Swagger\Client\Model\AccessToken $bean Access token json to update a access token. (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\AccessTokenResponse
     */
    public function updateAccesstoken1($id, $sensedia_auth = null, $bean = null)
    {
        list($response) = $this->updateAccesstoken1WithHttpInfo($id, $sensedia_auth, $bean);
        return $response;
    }

    /**
     * Operation updateAccesstoken1WithHttpInfo
     *
     * Update a access token
     *
     * @param string $id Access token id (required)
     * @param string $sensedia_auth Sensedia-Auth (optional)
     * @param \Swagger\Client\Model\AccessToken $bean Access token json to update a access token. (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\AccessTokenResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateAccesstoken1WithHttpInfo($id, $sensedia_auth = null, $bean = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling updateAccesstoken1');
        }
        // parse inputs
        $resourcePath = "/access-tokens/{id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['*/*']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // header params
        if ($sensedia_auth !== null) {
            $headerParams['Sensedia-Auth'] = $this->apiClient->getSerializer()->toHeaderValue($sensedia_auth);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($bean)) {
            $_tempBody = $bean;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\AccessTokenResponse',
                '/access-tokens/{id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\AccessTokenResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\AccessTokenResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation validatePartialAccessToken1
     *
     * Validate partial access token
     *
     * @param string $sensedia_auth Sensedia-Auth (optional)
     * @param \Swagger\Client\Model\AccessToken $bean Access token json to validate a access token. (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return object
     */
    public function validatePartialAccessToken1($sensedia_auth = null, $bean = null)
    {
        list($response) = $this->validatePartialAccessToken1WithHttpInfo($sensedia_auth, $bean);
        return $response;
    }

    /**
     * Operation validatePartialAccessToken1WithHttpInfo
     *
     * Validate partial access token
     *
     * @param string $sensedia_auth Sensedia-Auth (optional)
     * @param \Swagger\Client\Model\AccessToken $bean Access token json to validate a access token. (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function validatePartialAccessToken1WithHttpInfo($sensedia_auth = null, $bean = null)
    {
        // parse inputs
        $resourcePath = "/access-tokens/validate";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['*/*']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // header params
        if ($sensedia_auth !== null) {
            $headerParams['Sensedia-Auth'] = $this->apiClient->getSerializer()->toHeaderValue($sensedia_auth);
        }
        // body params
        $_tempBody = null;
        if (isset($bean)) {
            $_tempBody = $bean;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                'object',
                '/access-tokens/validate'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, 'object', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'object', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
