<?php
/**
 * DevelopersApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * API Manager Portal
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\Configuration;
use \Swagger\Client\ObjectSerializer;

/**
 * DevelopersApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DevelopersApi
{
    /**
     * API Client
     *
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Swagger\Client\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     *
     * @return DevelopersApi
     */
    public function setApiClient(\Swagger\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation createOrUpdateDeveloper1
     *
     * Create or update developer
     *
     * @param string $login Developer Login (required)
     * @param \Swagger\Client\Model\Developer $bean bean (required)
     * @param string $sensedia_auth Sensedia-Auth (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\Developer
     */
    public function createOrUpdateDeveloper1($login, $bean, $sensedia_auth = null)
    {
        list($response) = $this->createOrUpdateDeveloper1WithHttpInfo($login, $bean, $sensedia_auth);
        return $response;
    }

    /**
     * Operation createOrUpdateDeveloper1WithHttpInfo
     *
     * Create or update developer
     *
     * @param string $login Developer Login (required)
     * @param \Swagger\Client\Model\Developer $bean bean (required)
     * @param string $sensedia_auth Sensedia-Auth (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\Developer, HTTP status code, HTTP response headers (array of strings)
     */
    public function createOrUpdateDeveloper1WithHttpInfo($login, $bean, $sensedia_auth = null)
    {
        // verify the required parameter 'login' is set
        if ($login === null) {
            throw new \InvalidArgumentException('Missing the required parameter $login when calling createOrUpdateDeveloper1');
        }
        // verify the required parameter 'bean' is set
        if ($bean === null) {
            throw new \InvalidArgumentException('Missing the required parameter $bean when calling createOrUpdateDeveloper1');
        }
        // parse inputs
        $resourcePath = "/developers/{login}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['*/*']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // header params
        if ($sensedia_auth !== null) {
            $headerParams['Sensedia-Auth'] = $this->apiClient->getSerializer()->toHeaderValue($sensedia_auth);
        }
        // path params
        if ($login !== null) {
            $resourcePath = str_replace(
                "{" . "login" . "}",
                $this->apiClient->getSerializer()->toPathValue($login),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($bean)) {
            $_tempBody = $bean;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Developer',
                '/developers/{login}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Developer', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Developer', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Developer', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation developersCount1
     *
     * Retrieve developers total
     *
     * @param string $sensedia_auth Sensedia-Auth (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return int
     */
    public function developersCount1($sensedia_auth = null)
    {
        list($response) = $this->developersCount1WithHttpInfo($sensedia_auth);
        return $response;
    }

    /**
     * Operation developersCount1WithHttpInfo
     *
     * Retrieve developers total
     *
     * @param string $sensedia_auth Sensedia-Auth (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of int, HTTP status code, HTTP response headers (array of strings)
     */
    public function developersCount1WithHttpInfo($sensedia_auth = null)
    {
        // parse inputs
        $resourcePath = "/developers/count";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // header params
        if ($sensedia_auth !== null) {
            $headerParams['Sensedia-Auth'] = $this->apiClient->getSerializer()->toHeaderValue($sensedia_auth);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                'int',
                '/developers/count'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, 'int', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'int', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation removeDeveloper1
     *
     * Delete developer
     *
     * @param string $login Developer Login (required)
     * @param string $sensedia_auth Sensedia-Auth (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function removeDeveloper1($login, $sensedia_auth = null)
    {
        list($response) = $this->removeDeveloper1WithHttpInfo($login, $sensedia_auth);
        return $response;
    }

    /**
     * Operation removeDeveloper1WithHttpInfo
     *
     * Delete developer
     *
     * @param string $login Developer Login (required)
     * @param string $sensedia_auth Sensedia-Auth (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function removeDeveloper1WithHttpInfo($login, $sensedia_auth = null)
    {
        // verify the required parameter 'login' is set
        if ($login === null) {
            throw new \InvalidArgumentException('Missing the required parameter $login when calling removeDeveloper1');
        }
        // parse inputs
        $resourcePath = "/developers/{login}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['*/*']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // header params
        if ($sensedia_auth !== null) {
            $headerParams['Sensedia-Auth'] = $this->apiClient->getSerializer()->toHeaderValue($sensedia_auth);
        }
        // path params
        if ($login !== null) {
            $resourcePath = str_replace(
                "{" . "login" . "}",
                $this->apiClient->getSerializer()->toPathValue($login),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/developers/{login}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation retriveChangeLogByUsername1
     *
     * Retrive audit developer per username
     *
     * @param string $username Developer username (required)
     * @param string $sensedia_auth Sensedia-Auth (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\ChangeLogBean[]
     */
    public function retriveChangeLogByUsername1($username, $sensedia_auth = null)
    {
        list($response) = $this->retriveChangeLogByUsername1WithHttpInfo($username, $sensedia_auth);
        return $response;
    }

    /**
     * Operation retriveChangeLogByUsername1WithHttpInfo
     *
     * Retrive audit developer per username
     *
     * @param string $username Developer username (required)
     * @param string $sensedia_auth Sensedia-Auth (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\ChangeLogBean[], HTTP status code, HTTP response headers (array of strings)
     */
    public function retriveChangeLogByUsername1WithHttpInfo($username, $sensedia_auth = null)
    {
        // verify the required parameter 'username' is set
        if ($username === null) {
            throw new \InvalidArgumentException('Missing the required parameter $username when calling retriveChangeLogByUsername1');
        }
        // parse inputs
        $resourcePath = "/developers/{username}/changelog";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // header params
        if ($sensedia_auth !== null) {
            $headerParams['Sensedia-Auth'] = $this->apiClient->getSerializer()->toHeaderValue($sensedia_auth);
        }
        // path params
        if ($username !== null) {
            $resourcePath = str_replace(
                "{" . "username" . "}",
                $this->apiClient->getSerializer()->toPathValue($username),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ChangeLogBean[]',
                '/developers/{username}/changelog'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ChangeLogBean[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ChangeLogBean[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation retriveDeveloperByLogin1
     *
     * Retrive developer per Login
     *
     * @param string $login Developer Login (required)
     * @param string $sensedia_auth Sensedia-Auth (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\Developer
     */
    public function retriveDeveloperByLogin1($login, $sensedia_auth = null)
    {
        list($response) = $this->retriveDeveloperByLogin1WithHttpInfo($login, $sensedia_auth);
        return $response;
    }

    /**
     * Operation retriveDeveloperByLogin1WithHttpInfo
     *
     * Retrive developer per Login
     *
     * @param string $login Developer Login (required)
     * @param string $sensedia_auth Sensedia-Auth (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\Developer, HTTP status code, HTTP response headers (array of strings)
     */
    public function retriveDeveloperByLogin1WithHttpInfo($login, $sensedia_auth = null)
    {
        // verify the required parameter 'login' is set
        if ($login === null) {
            throw new \InvalidArgumentException('Missing the required parameter $login when calling retriveDeveloperByLogin1');
        }
        // parse inputs
        $resourcePath = "/developers/{login}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['*/*']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // header params
        if ($sensedia_auth !== null) {
            $headerParams['Sensedia-Auth'] = $this->apiClient->getSerializer()->toHeaderValue($sensedia_auth);
        }
        // path params
        if ($login !== null) {
            $resourcePath = str_replace(
                "{" . "login" . "}",
                $this->apiClient->getSerializer()->toPathValue($login),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Developer',
                '/developers/{login}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Developer', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Developer', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation retriveDevelopers1
     *
     * Retrive developers
     *
     * @param string $sensedia_auth Sensedia-Auth (optional)
     * @param string $login_or_email Login or E-mail (optional)
     * @param string $name Developer Name (optional)
     * @param string $email Developer E-mail (optional)
     * @param int $actual_page Number of the page in pagination. The starting page number is zero. (optional)
     * @param int $page_size Define the size of the returned list of developers. (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\Developer[]
     */
    public function retriveDevelopers1($sensedia_auth = null, $login_or_email = null, $name = null, $email = null, $actual_page = null, $page_size = null)
    {
        list($response) = $this->retriveDevelopers1WithHttpInfo($sensedia_auth, $login_or_email, $name, $email, $actual_page, $page_size);
        return $response;
    }

    /**
     * Operation retriveDevelopers1WithHttpInfo
     *
     * Retrive developers
     *
     * @param string $sensedia_auth Sensedia-Auth (optional)
     * @param string $login_or_email Login or E-mail (optional)
     * @param string $name Developer Name (optional)
     * @param string $email Developer E-mail (optional)
     * @param int $actual_page Number of the page in pagination. The starting page number is zero. (optional)
     * @param int $page_size Define the size of the returned list of developers. (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\Developer[], HTTP status code, HTTP response headers (array of strings)
     */
    public function retriveDevelopers1WithHttpInfo($sensedia_auth = null, $login_or_email = null, $name = null, $email = null, $actual_page = null, $page_size = null)
    {
        // parse inputs
        $resourcePath = "/developers";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['*/*']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($login_or_email !== null) {
            $queryParams['loginOrEmail'] = $this->apiClient->getSerializer()->toQueryValue($login_or_email);
        }
        // query params
        if ($name !== null) {
            $queryParams['name'] = $this->apiClient->getSerializer()->toQueryValue($name);
        }
        // query params
        if ($email !== null) {
            $queryParams['email'] = $this->apiClient->getSerializer()->toQueryValue($email);
        }
        // query params
        if ($actual_page !== null) {
            $queryParams['actualPage'] = $this->apiClient->getSerializer()->toQueryValue($actual_page);
        }
        // query params
        if ($page_size !== null) {
            $queryParams['pageSize'] = $this->apiClient->getSerializer()->toQueryValue($page_size);
        }
        // header params
        if ($sensedia_auth !== null) {
            $headerParams['Sensedia-Auth'] = $this->apiClient->getSerializer()->toHeaderValue($sensedia_auth);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Developer[]',
                '/developers'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Developer[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Developer[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
