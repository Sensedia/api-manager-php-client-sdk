<?php
/**
 * APIsApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * API Manager Portal
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\Configuration;
use \Swagger\Client\ObjectSerializer;

/**
 * APIsApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class APIsApi
{
    /**
     * API Client
     *
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Swagger\Client\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     *
     * @return APIsApi
     */
    public function setApiClient(\Swagger\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation cloneApi1
     *
     * Clone a API
     *
     * @param string $id API id (required)
     * @param string $sensedia_auth Sensedia-Auth (optional)
     * @param \Swagger\Client\Model\API $api_bean API json to update a api (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\APIResponse
     */
    public function cloneApi1($id, $sensedia_auth = null, $api_bean = null)
    {
        list($response) = $this->cloneApi1WithHttpInfo($id, $sensedia_auth, $api_bean);
        return $response;
    }

    /**
     * Operation cloneApi1WithHttpInfo
     *
     * Clone a API
     *
     * @param string $id API id (required)
     * @param string $sensedia_auth Sensedia-Auth (optional)
     * @param \Swagger\Client\Model\API $api_bean API json to update a api (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\APIResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cloneApi1WithHttpInfo($id, $sensedia_auth = null, $api_bean = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling cloneApi1');
        }
        // parse inputs
        $resourcePath = "/apis/{id}/clone";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['*/*']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // header params
        if ($sensedia_auth !== null) {
            $headerParams['Sensedia-Auth'] = $this->apiClient->getSerializer()->toHeaderValue($sensedia_auth);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($api_bean)) {
            $_tempBody = $api_bean;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\APIResponse',
                '/apis/{id}/clone'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\APIResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\APIResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\APIResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createApi1
     *
     * Create a new API
     *
     * @param string $sensedia_auth Sensedia-Auth (optional)
     * @param \Swagger\Client\Model\APICreateBean $bean API json to create a API (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\APIResponse
     */
    public function createApi1($sensedia_auth = null, $bean = null)
    {
        list($response) = $this->createApi1WithHttpInfo($sensedia_auth, $bean);
        return $response;
    }

    /**
     * Operation createApi1WithHttpInfo
     *
     * Create a new API
     *
     * @param string $sensedia_auth Sensedia-Auth (optional)
     * @param \Swagger\Client\Model\APICreateBean $bean API json to create a API (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\APIResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createApi1WithHttpInfo($sensedia_auth = null, $bean = null)
    {
        // parse inputs
        $resourcePath = "/apis";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['*/*']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // header params
        if ($sensedia_auth !== null) {
            $headerParams['Sensedia-Auth'] = $this->apiClient->getSerializer()->toHeaderValue($sensedia_auth);
        }
        // body params
        $_tempBody = null;
        if (isset($bean)) {
            $_tempBody = $bean;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\APIResponse',
                '/apis'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\APIResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\APIResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\APIResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createNewVersion1
     *
     * Create new version
     *
     * @param string $id API id (required)
     * @param string $sensedia_auth Sensedia-Auth (optional)
     * @param \Swagger\Client\Model\API $api_bean API json to update a api (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\APIResponse
     */
    public function createNewVersion1($id, $sensedia_auth = null, $api_bean = null)
    {
        list($response) = $this->createNewVersion1WithHttpInfo($id, $sensedia_auth, $api_bean);
        return $response;
    }

    /**
     * Operation createNewVersion1WithHttpInfo
     *
     * Create new version
     *
     * @param string $id API id (required)
     * @param string $sensedia_auth Sensedia-Auth (optional)
     * @param \Swagger\Client\Model\API $api_bean API json to update a api (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\APIResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createNewVersion1WithHttpInfo($id, $sensedia_auth = null, $api_bean = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling createNewVersion1');
        }
        // parse inputs
        $resourcePath = "/apis/{id}/versions";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // header params
        if ($sensedia_auth !== null) {
            $headerParams['Sensedia-Auth'] = $this->apiClient->getSerializer()->toHeaderValue($sensedia_auth);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($api_bean)) {
            $_tempBody = $api_bean;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\APIResponse',
                '/apis/{id}/versions'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\APIResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\APIResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getApiById1
     *
     * Find API by id
     *
     * @param string $api_id API id (required)
     * @param string $sensedia_auth Sensedia-Auth (optional)
     * @param string $filter Filter type searched (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\API
     */
    public function getApiById1($api_id, $sensedia_auth = null, $filter = null)
    {
        list($response) = $this->getApiById1WithHttpInfo($api_id, $sensedia_auth, $filter);
        return $response;
    }

    /**
     * Operation getApiById1WithHttpInfo
     *
     * Find API by id
     *
     * @param string $api_id API id (required)
     * @param string $sensedia_auth Sensedia-Auth (optional)
     * @param string $filter Filter type searched (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\API, HTTP status code, HTTP response headers (array of strings)
     */
    public function getApiById1WithHttpInfo($api_id, $sensedia_auth = null, $filter = null)
    {
        // verify the required parameter 'api_id' is set
        if ($api_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $api_id when calling getApiById1');
        }
        // parse inputs
        $resourcePath = "/apis/{apiId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($filter !== null) {
            $queryParams['filter'] = $this->apiClient->getSerializer()->toQueryValue($filter);
        }
        // header params
        if ($sensedia_auth !== null) {
            $headerParams['Sensedia-Auth'] = $this->apiClient->getSerializer()->toHeaderValue($sensedia_auth);
        }
        // path params
        if ($api_id !== null) {
            $resourcePath = str_replace(
                "{" . "apiId" . "}",
                $this->apiClient->getSerializer()->toPathValue($api_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\API',
                '/apis/{apiId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\API', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\API', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getApis1
     *
     * Return all APIs
     *
     * @param string $sensedia_auth Sensedia-Auth (optional)
     * @param bool $private_api Private API (optional)
     * @param string $filter Filter type searched (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\API[]
     */
    public function getApis1($sensedia_auth = null, $private_api = null, $filter = null)
    {
        list($response) = $this->getApis1WithHttpInfo($sensedia_auth, $private_api, $filter);
        return $response;
    }

    /**
     * Operation getApis1WithHttpInfo
     *
     * Return all APIs
     *
     * @param string $sensedia_auth Sensedia-Auth (optional)
     * @param bool $private_api Private API (optional)
     * @param string $filter Filter type searched (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\API[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getApis1WithHttpInfo($sensedia_auth = null, $private_api = null, $filter = null)
    {
        // parse inputs
        $resourcePath = "/apis";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($private_api !== null) {
            $queryParams['privateAPI'] = $this->apiClient->getSerializer()->toQueryValue($private_api);
        }
        // query params
        if ($filter !== null) {
            $queryParams['filter'] = $this->apiClient->getSerializer()->toQueryValue($filter);
        }
        // header params
        if ($sensedia_auth !== null) {
            $headerParams['Sensedia-Auth'] = $this->apiClient->getSerializer()->toHeaderValue($sensedia_auth);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\API[]',
                '/apis'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\API[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\API[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getChangeLogByApiId1
     *
     * Retrive changelog per API id
     *
     * @param int $id API id (required)
     * @param string $sensedia_auth Sensedia-Auth (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\ChangeLog[]
     */
    public function getChangeLogByApiId1($id, $sensedia_auth = null)
    {
        list($response) = $this->getChangeLogByApiId1WithHttpInfo($id, $sensedia_auth);
        return $response;
    }

    /**
     * Operation getChangeLogByApiId1WithHttpInfo
     *
     * Retrive changelog per API id
     *
     * @param int $id API id (required)
     * @param string $sensedia_auth Sensedia-Auth (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\ChangeLog[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getChangeLogByApiId1WithHttpInfo($id, $sensedia_auth = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling getChangeLogByApiId1');
        }
        // parse inputs
        $resourcePath = "/apis/{id}/changelog";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // header params
        if ($sensedia_auth !== null) {
            $headerParams['Sensedia-Auth'] = $this->apiClient->getSerializer()->toHeaderValue($sensedia_auth);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ChangeLog[]',
                '/apis/{id}/changelog'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ChangeLog[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ChangeLog[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getLastRevisionByApi1
     *
     * Find last revision by API id
     *
     * @param int $id id (required)
     * @param string $sensedia_auth Sensedia-Auth (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\RevisionBean
     */
    public function getLastRevisionByApi1($id, $sensedia_auth = null)
    {
        list($response) = $this->getLastRevisionByApi1WithHttpInfo($id, $sensedia_auth);
        return $response;
    }

    /**
     * Operation getLastRevisionByApi1WithHttpInfo
     *
     * Find last revision by API id
     *
     * @param int $id id (required)
     * @param string $sensedia_auth Sensedia-Auth (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\RevisionBean, HTTP status code, HTTP response headers (array of strings)
     */
    public function getLastRevisionByApi1WithHttpInfo($id, $sensedia_auth = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling getLastRevisionByApi1');
        }
        // parse inputs
        $resourcePath = "/apis/{id}/revisions";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // header params
        if ($sensedia_auth !== null) {
            $headerParams['Sensedia-Auth'] = $this->apiClient->getSerializer()->toHeaderValue($sensedia_auth);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\RevisionBean',
                '/apis/{id}/revisions'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\RevisionBean', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\RevisionBean', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getVersionsByApi1
     *
     * Find version by API id
     *
     * @param string $id API id (required)
     * @param string $sensedia_auth Sensedia-Auth (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\API[]
     */
    public function getVersionsByApi1($id, $sensedia_auth = null)
    {
        list($response) = $this->getVersionsByApi1WithHttpInfo($id, $sensedia_auth);
        return $response;
    }

    /**
     * Operation getVersionsByApi1WithHttpInfo
     *
     * Find version by API id
     *
     * @param string $id API id (required)
     * @param string $sensedia_auth Sensedia-Auth (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\API[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getVersionsByApi1WithHttpInfo($id, $sensedia_auth = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling getVersionsByApi1');
        }
        // parse inputs
        $resourcePath = "/apis/{id}/versions";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // header params
        if ($sensedia_auth !== null) {
            $headerParams['Sensedia-Auth'] = $this->apiClient->getSerializer()->toHeaderValue($sensedia_auth);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\API[]',
                '/apis/{id}/versions'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\API[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\API[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation removeApi1
     *
     * Delete a API
     *
     * @param string $id API id (required)
     * @param string $sensedia_auth Sensedia-Auth (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\ResponseEntity
     */
    public function removeApi1($id, $sensedia_auth = null)
    {
        list($response) = $this->removeApi1WithHttpInfo($id, $sensedia_auth);
        return $response;
    }

    /**
     * Operation removeApi1WithHttpInfo
     *
     * Delete a API
     *
     * @param string $id API id (required)
     * @param string $sensedia_auth Sensedia-Auth (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\ResponseEntity, HTTP status code, HTTP response headers (array of strings)
     */
    public function removeApi1WithHttpInfo($id, $sensedia_auth = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling removeApi1');
        }
        // parse inputs
        $resourcePath = "/apis/{id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // header params
        if ($sensedia_auth !== null) {
            $headerParams['Sensedia-Auth'] = $this->apiClient->getSerializer()->toHeaderValue($sensedia_auth);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ResponseEntity',
                '/apis/{id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ResponseEntity', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ResponseEntity', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 204:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ResponseEntity', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation removeLinkEnvironmentWithApi1
     *
     * Delete environment link with API
     *
     * @param string $id id (required)
     * @param string $environment_id environmentId (required)
     * @param string $sensedia_auth Sensedia-Auth (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\ResponseEntity
     */
    public function removeLinkEnvironmentWithApi1($id, $environment_id, $sensedia_auth = null)
    {
        list($response) = $this->removeLinkEnvironmentWithApi1WithHttpInfo($id, $environment_id, $sensedia_auth);
        return $response;
    }

    /**
     * Operation removeLinkEnvironmentWithApi1WithHttpInfo
     *
     * Delete environment link with API
     *
     * @param string $id id (required)
     * @param string $environment_id environmentId (required)
     * @param string $sensedia_auth Sensedia-Auth (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\ResponseEntity, HTTP status code, HTTP response headers (array of strings)
     */
    public function removeLinkEnvironmentWithApi1WithHttpInfo($id, $environment_id, $sensedia_auth = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling removeLinkEnvironmentWithApi1');
        }
        // verify the required parameter 'environment_id' is set
        if ($environment_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $environment_id when calling removeLinkEnvironmentWithApi1');
        }
        // parse inputs
        $resourcePath = "/apis/{id}/environments/{environmentId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['*/*']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // header params
        if ($sensedia_auth !== null) {
            $headerParams['Sensedia-Auth'] = $this->apiClient->getSerializer()->toHeaderValue($sensedia_auth);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($environment_id !== null) {
            $resourcePath = str_replace(
                "{" . "environmentId" . "}",
                $this->apiClient->getSerializer()->toPathValue($environment_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ResponseEntity',
                '/apis/{id}/environments/{environmentId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ResponseEntity', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ResponseEntity', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 204:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ResponseEntity', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateApi1
     *
     * Update a API
     *
     * @param string $id API id (required)
     * @param string $sensedia_auth Sensedia-Auth (optional)
     * @param \Swagger\Client\Model\API $api_bean API json to update a api (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\APIResponse
     */
    public function updateApi1($id, $sensedia_auth = null, $api_bean = null)
    {
        list($response) = $this->updateApi1WithHttpInfo($id, $sensedia_auth, $api_bean);
        return $response;
    }

    /**
     * Operation updateApi1WithHttpInfo
     *
     * Update a API
     *
     * @param string $id API id (required)
     * @param string $sensedia_auth Sensedia-Auth (optional)
     * @param \Swagger\Client\Model\API $api_bean API json to update a api (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\APIResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateApi1WithHttpInfo($id, $sensedia_auth = null, $api_bean = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling updateApi1');
        }
        // parse inputs
        $resourcePath = "/apis/{id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // header params
        if ($sensedia_auth !== null) {
            $headerParams['Sensedia-Auth'] = $this->apiClient->getSerializer()->toHeaderValue($sensedia_auth);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($api_bean)) {
            $_tempBody = $api_bean;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\APIResponse',
                '/apis/{id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\APIResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\APIResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation validatePartialApi1
     *
     * Validate partial a API
     *
     * @param string $sensedia_auth Sensedia-Auth (optional)
     * @param \Swagger\Client\Model\API $bean API json to validate a API (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\ResponseEntity
     */
    public function validatePartialApi1($sensedia_auth = null, $bean = null)
    {
        list($response) = $this->validatePartialApi1WithHttpInfo($sensedia_auth, $bean);
        return $response;
    }

    /**
     * Operation validatePartialApi1WithHttpInfo
     *
     * Validate partial a API
     *
     * @param string $sensedia_auth Sensedia-Auth (optional)
     * @param \Swagger\Client\Model\API $bean API json to validate a API (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\ResponseEntity, HTTP status code, HTTP response headers (array of strings)
     */
    public function validatePartialApi1WithHttpInfo($sensedia_auth = null, $bean = null)
    {
        // parse inputs
        $resourcePath = "/apis/validate";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['*/*']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // header params
        if ($sensedia_auth !== null) {
            $headerParams['Sensedia-Auth'] = $this->apiClient->getSerializer()->toHeaderValue($sensedia_auth);
        }
        // body params
        $_tempBody = null;
        if (isset($bean)) {
            $_tempBody = $bean;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ResponseEntity',
                '/apis/validate'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ResponseEntity', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ResponseEntity', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
