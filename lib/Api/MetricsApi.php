<?php
/**
 * MetricsApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * API Manager Portal
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\Configuration;
use \Swagger\Client\ObjectSerializer;

/**
 * MetricsApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class MetricsApi
{
    /**
     * API Client
     *
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Swagger\Client\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     *
     * @return MetricsApi
     */
    public function setApiClient(\Swagger\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation getAccessTokensByMonth1
     *
     * Find access token consolited by month
     *
     * @param string $sensedia_auth Sensedia-Auth (optional)
     * @param string $begin_date Begin date (optional)
     * @param string $end_date End date (optional)
     * @param string $resolution Metric resolution (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\TokensMetric[]
     */
    public function getAccessTokensByMonth1($sensedia_auth = null, $begin_date = null, $end_date = null, $resolution = null)
    {
        list($response) = $this->getAccessTokensByMonth1WithHttpInfo($sensedia_auth, $begin_date, $end_date, $resolution);
        return $response;
    }

    /**
     * Operation getAccessTokensByMonth1WithHttpInfo
     *
     * Find access token consolited by month
     *
     * @param string $sensedia_auth Sensedia-Auth (optional)
     * @param string $begin_date Begin date (optional)
     * @param string $end_date End date (optional)
     * @param string $resolution Metric resolution (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\TokensMetric[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getAccessTokensByMonth1WithHttpInfo($sensedia_auth = null, $begin_date = null, $end_date = null, $resolution = null)
    {
        // parse inputs
        $resourcePath = "/metrics/access-tokens";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['*/*']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($begin_date !== null) {
            $queryParams['beginDate'] = $this->apiClient->getSerializer()->toQueryValue($begin_date);
        }
        // query params
        if ($end_date !== null) {
            $queryParams['endDate'] = $this->apiClient->getSerializer()->toQueryValue($end_date);
        }
        // query params
        if ($resolution !== null) {
            $queryParams['resolution'] = $this->apiClient->getSerializer()->toQueryValue($resolution);
        }
        // header params
        if ($sensedia_auth !== null) {
            $headerParams['Sensedia-Auth'] = $this->apiClient->getSerializer()->toHeaderValue($sensedia_auth);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\TokensMetric[]',
                '/metrics/access-tokens'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\TokensMetric[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\TokensMetric[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getAppsByMonth1
     *
     * Find apps consolited by month
     *
     * @param string $sensedia_auth Sensedia-Auth (optional)
     * @param string $begin_date Begin date (optional)
     * @param string $end_date End date (optional)
     * @param string $resolution Metric resolution (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\TokensMetric[]
     */
    public function getAppsByMonth1($sensedia_auth = null, $begin_date = null, $end_date = null, $resolution = null)
    {
        list($response) = $this->getAppsByMonth1WithHttpInfo($sensedia_auth, $begin_date, $end_date, $resolution);
        return $response;
    }

    /**
     * Operation getAppsByMonth1WithHttpInfo
     *
     * Find apps consolited by month
     *
     * @param string $sensedia_auth Sensedia-Auth (optional)
     * @param string $begin_date Begin date (optional)
     * @param string $end_date End date (optional)
     * @param string $resolution Metric resolution (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\TokensMetric[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getAppsByMonth1WithHttpInfo($sensedia_auth = null, $begin_date = null, $end_date = null, $resolution = null)
    {
        // parse inputs
        $resourcePath = "/metrics/apps";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['*/*']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($begin_date !== null) {
            $queryParams['beginDate'] = $this->apiClient->getSerializer()->toQueryValue($begin_date);
        }
        // query params
        if ($end_date !== null) {
            $queryParams['endDate'] = $this->apiClient->getSerializer()->toQueryValue($end_date);
        }
        // query params
        if ($resolution !== null) {
            $queryParams['resolution'] = $this->apiClient->getSerializer()->toQueryValue($resolution);
        }
        // header params
        if ($sensedia_auth !== null) {
            $headerParams['Sensedia-Auth'] = $this->apiClient->getSerializer()->toHeaderValue($sensedia_auth);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\TokensMetric[]',
                '/metrics/apps'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\TokensMetric[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\TokensMetric[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getCache1
     *
     * Find cache
     *
     * @param string $sensedia_auth Sensedia-Auth (optional)
     * @param int $api_id API id (optional)
     * @param int $revision_id Revision id (optional)
     * @param int $operation_id Operation id (optional)
     * @param int $environment_id Environment id (optional)
     * @param string $begin_date Begin date (optional)
     * @param string $end_date End date (optional)
     * @param string $resolution Metric resolution (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\OperationMetric[]
     */
    public function getCache1($sensedia_auth = null, $api_id = null, $revision_id = null, $operation_id = null, $environment_id = null, $begin_date = null, $end_date = null, $resolution = null)
    {
        list($response) = $this->getCache1WithHttpInfo($sensedia_auth, $api_id, $revision_id, $operation_id, $environment_id, $begin_date, $end_date, $resolution);
        return $response;
    }

    /**
     * Operation getCache1WithHttpInfo
     *
     * Find cache
     *
     * @param string $sensedia_auth Sensedia-Auth (optional)
     * @param int $api_id API id (optional)
     * @param int $revision_id Revision id (optional)
     * @param int $operation_id Operation id (optional)
     * @param int $environment_id Environment id (optional)
     * @param string $begin_date Begin date (optional)
     * @param string $end_date End date (optional)
     * @param string $resolution Metric resolution (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\OperationMetric[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getCache1WithHttpInfo($sensedia_auth = null, $api_id = null, $revision_id = null, $operation_id = null, $environment_id = null, $begin_date = null, $end_date = null, $resolution = null)
    {
        // parse inputs
        $resourcePath = "/metrics/cache";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['*/*']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($api_id !== null) {
            $queryParams['apiId'] = $this->apiClient->getSerializer()->toQueryValue($api_id);
        }
        // query params
        if ($revision_id !== null) {
            $queryParams['revisionId'] = $this->apiClient->getSerializer()->toQueryValue($revision_id);
        }
        // query params
        if ($operation_id !== null) {
            $queryParams['operationId'] = $this->apiClient->getSerializer()->toQueryValue($operation_id);
        }
        // query params
        if ($environment_id !== null) {
            $queryParams['environmentId'] = $this->apiClient->getSerializer()->toQueryValue($environment_id);
        }
        // query params
        if ($begin_date !== null) {
            $queryParams['beginDate'] = $this->apiClient->getSerializer()->toQueryValue($begin_date);
        }
        // query params
        if ($end_date !== null) {
            $queryParams['endDate'] = $this->apiClient->getSerializer()->toQueryValue($end_date);
        }
        // query params
        if ($resolution !== null) {
            $queryParams['resolution'] = $this->apiClient->getSerializer()->toQueryValue($resolution);
        }
        // header params
        if ($sensedia_auth !== null) {
            $headerParams['Sensedia-Auth'] = $this->apiClient->getSerializer()->toHeaderValue($sensedia_auth);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\OperationMetric[]',
                '/metrics/cache'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\OperationMetric[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\OperationMetric[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getCacheLatency1
     *
     * Find cache latency
     *
     * @param string $sensedia_auth Sensedia-Auth (optional)
     * @param int $api_id API id (optional)
     * @param int $revision_id Revision id (optional)
     * @param int $operation_id Operation id (optional)
     * @param int $environment_id Environment id (optional)
     * @param string $begin_date Begin date (optional)
     * @param string $end_date End date (optional)
     * @param string $resolution Metric resolution (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\OperationMetric[]
     */
    public function getCacheLatency1($sensedia_auth = null, $api_id = null, $revision_id = null, $operation_id = null, $environment_id = null, $begin_date = null, $end_date = null, $resolution = null)
    {
        list($response) = $this->getCacheLatency1WithHttpInfo($sensedia_auth, $api_id, $revision_id, $operation_id, $environment_id, $begin_date, $end_date, $resolution);
        return $response;
    }

    /**
     * Operation getCacheLatency1WithHttpInfo
     *
     * Find cache latency
     *
     * @param string $sensedia_auth Sensedia-Auth (optional)
     * @param int $api_id API id (optional)
     * @param int $revision_id Revision id (optional)
     * @param int $operation_id Operation id (optional)
     * @param int $environment_id Environment id (optional)
     * @param string $begin_date Begin date (optional)
     * @param string $end_date End date (optional)
     * @param string $resolution Metric resolution (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\OperationMetric[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getCacheLatency1WithHttpInfo($sensedia_auth = null, $api_id = null, $revision_id = null, $operation_id = null, $environment_id = null, $begin_date = null, $end_date = null, $resolution = null)
    {
        // parse inputs
        $resourcePath = "/metrics/cache/latency";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['*/*']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($api_id !== null) {
            $queryParams['apiId'] = $this->apiClient->getSerializer()->toQueryValue($api_id);
        }
        // query params
        if ($revision_id !== null) {
            $queryParams['revisionId'] = $this->apiClient->getSerializer()->toQueryValue($revision_id);
        }
        // query params
        if ($operation_id !== null) {
            $queryParams['operationId'] = $this->apiClient->getSerializer()->toQueryValue($operation_id);
        }
        // query params
        if ($environment_id !== null) {
            $queryParams['environmentId'] = $this->apiClient->getSerializer()->toQueryValue($environment_id);
        }
        // query params
        if ($begin_date !== null) {
            $queryParams['beginDate'] = $this->apiClient->getSerializer()->toQueryValue($begin_date);
        }
        // query params
        if ($end_date !== null) {
            $queryParams['endDate'] = $this->apiClient->getSerializer()->toQueryValue($end_date);
        }
        // query params
        if ($resolution !== null) {
            $queryParams['resolution'] = $this->apiClient->getSerializer()->toQueryValue($resolution);
        }
        // header params
        if ($sensedia_auth !== null) {
            $headerParams['Sensedia-Auth'] = $this->apiClient->getSerializer()->toHeaderValue($sensedia_auth);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\OperationMetric[]',
                '/metrics/cache/latency'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\OperationMetric[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\OperationMetric[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getCacheSize1
     *
     * Retrive cache size
     *
     * @param string $sensedia_auth Sensedia-Auth (optional)
     * @param int $api_id API id (optional)
     * @param int $revision_id Revision id (optional)
     * @param int $operation_id Operation id (optional)
     * @param int $environment_id Environment id (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\CacheMetric
     */
    public function getCacheSize1($sensedia_auth = null, $api_id = null, $revision_id = null, $operation_id = null, $environment_id = null)
    {
        list($response) = $this->getCacheSize1WithHttpInfo($sensedia_auth, $api_id, $revision_id, $operation_id, $environment_id);
        return $response;
    }

    /**
     * Operation getCacheSize1WithHttpInfo
     *
     * Retrive cache size
     *
     * @param string $sensedia_auth Sensedia-Auth (optional)
     * @param int $api_id API id (optional)
     * @param int $revision_id Revision id (optional)
     * @param int $operation_id Operation id (optional)
     * @param int $environment_id Environment id (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\CacheMetric, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCacheSize1WithHttpInfo($sensedia_auth = null, $api_id = null, $revision_id = null, $operation_id = null, $environment_id = null)
    {
        // parse inputs
        $resourcePath = "/metrics/cache/size";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['*/*']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($api_id !== null) {
            $queryParams['apiId'] = $this->apiClient->getSerializer()->toQueryValue($api_id);
        }
        // query params
        if ($revision_id !== null) {
            $queryParams['revisionId'] = $this->apiClient->getSerializer()->toQueryValue($revision_id);
        }
        // query params
        if ($operation_id !== null) {
            $queryParams['operationId'] = $this->apiClient->getSerializer()->toQueryValue($operation_id);
        }
        // query params
        if ($environment_id !== null) {
            $queryParams['environmentId'] = $this->apiClient->getSerializer()->toQueryValue($environment_id);
        }
        // header params
        if ($sensedia_auth !== null) {
            $headerParams['Sensedia-Auth'] = $this->apiClient->getSerializer()->toHeaderValue($sensedia_auth);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\CacheMetric',
                '/metrics/cache/size'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\CacheMetric', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\CacheMetric', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getCallsByMonth1
     *
     * Find calls by month
     *
     * @param string $sensedia_auth Sensedia-Auth (optional)
     * @param string $begin_date Begin date (optional)
     * @param string $end_date End date (optional)
     * @param string $resolution Metric resolution (optional)
     * @param int $environment_id Environment id (optional)
     * @param int $api_id API id (optional)
     * @param int $revision_id Revision id (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\CallsMetric[]
     */
    public function getCallsByMonth1($sensedia_auth = null, $begin_date = null, $end_date = null, $resolution = null, $environment_id = null, $api_id = null, $revision_id = null)
    {
        list($response) = $this->getCallsByMonth1WithHttpInfo($sensedia_auth, $begin_date, $end_date, $resolution, $environment_id, $api_id, $revision_id);
        return $response;
    }

    /**
     * Operation getCallsByMonth1WithHttpInfo
     *
     * Find calls by month
     *
     * @param string $sensedia_auth Sensedia-Auth (optional)
     * @param string $begin_date Begin date (optional)
     * @param string $end_date End date (optional)
     * @param string $resolution Metric resolution (optional)
     * @param int $environment_id Environment id (optional)
     * @param int $api_id API id (optional)
     * @param int $revision_id Revision id (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\CallsMetric[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getCallsByMonth1WithHttpInfo($sensedia_auth = null, $begin_date = null, $end_date = null, $resolution = null, $environment_id = null, $api_id = null, $revision_id = null)
    {
        // parse inputs
        $resourcePath = "/metrics/calls";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['*/*']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($begin_date !== null) {
            $queryParams['beginDate'] = $this->apiClient->getSerializer()->toQueryValue($begin_date);
        }
        // query params
        if ($end_date !== null) {
            $queryParams['endDate'] = $this->apiClient->getSerializer()->toQueryValue($end_date);
        }
        // query params
        if ($resolution !== null) {
            $queryParams['resolution'] = $this->apiClient->getSerializer()->toQueryValue($resolution);
        }
        // query params
        if ($environment_id !== null) {
            $queryParams['environmentId'] = $this->apiClient->getSerializer()->toQueryValue($environment_id);
        }
        // query params
        if ($api_id !== null) {
            $queryParams['apiId'] = $this->apiClient->getSerializer()->toQueryValue($api_id);
        }
        // query params
        if ($revision_id !== null) {
            $queryParams['revisionId'] = $this->apiClient->getSerializer()->toQueryValue($revision_id);
        }
        // header params
        if ($sensedia_auth !== null) {
            $headerParams['Sensedia-Auth'] = $this->apiClient->getSerializer()->toHeaderValue($sensedia_auth);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\CallsMetric[]',
                '/metrics/calls'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\CallsMetric[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\CallsMetric[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getHealth1
     *
     * Find Health
     *
     * @param string $sensedia_auth Sensedia-Auth (optional)
     * @param bool $health_portal Health Portal (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\OperationHealth[]
     */
    public function getHealth1($sensedia_auth = null, $health_portal = null)
    {
        list($response) = $this->getHealth1WithHttpInfo($sensedia_auth, $health_portal);
        return $response;
    }

    /**
     * Operation getHealth1WithHttpInfo
     *
     * Find Health
     *
     * @param string $sensedia_auth Sensedia-Auth (optional)
     * @param bool $health_portal Health Portal (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\OperationHealth[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getHealth1WithHttpInfo($sensedia_auth = null, $health_portal = null)
    {
        // parse inputs
        $resourcePath = "/metrics/health";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['*/*']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($health_portal !== null) {
            $queryParams['healthPortal'] = $this->apiClient->getSerializer()->toQueryValue($health_portal);
        }
        // header params
        if ($sensedia_auth !== null) {
            $headerParams['Sensedia-Auth'] = $this->apiClient->getSerializer()->toHeaderValue($sensedia_auth);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\OperationHealth[]',
                '/metrics/health'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\OperationHealth[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\OperationHealth[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getLatencyByMonth1
     *
     * Find latency by month
     *
     * @param string $sensedia_auth Sensedia-Auth (optional)
     * @param string $begin_date Begin date (optional)
     * @param string $end_date End date (optional)
     * @param string $resolution Metric resolution (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\LatencyMetric[]
     */
    public function getLatencyByMonth1($sensedia_auth = null, $begin_date = null, $end_date = null, $resolution = null)
    {
        list($response) = $this->getLatencyByMonth1WithHttpInfo($sensedia_auth, $begin_date, $end_date, $resolution);
        return $response;
    }

    /**
     * Operation getLatencyByMonth1WithHttpInfo
     *
     * Find latency by month
     *
     * @param string $sensedia_auth Sensedia-Auth (optional)
     * @param string $begin_date Begin date (optional)
     * @param string $end_date End date (optional)
     * @param string $resolution Metric resolution (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\LatencyMetric[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getLatencyByMonth1WithHttpInfo($sensedia_auth = null, $begin_date = null, $end_date = null, $resolution = null)
    {
        // parse inputs
        $resourcePath = "/metrics/latency";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['*/*']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($begin_date !== null) {
            $queryParams['beginDate'] = $this->apiClient->getSerializer()->toQueryValue($begin_date);
        }
        // query params
        if ($end_date !== null) {
            $queryParams['endDate'] = $this->apiClient->getSerializer()->toQueryValue($end_date);
        }
        // query params
        if ($resolution !== null) {
            $queryParams['resolution'] = $this->apiClient->getSerializer()->toQueryValue($resolution);
        }
        // header params
        if ($sensedia_auth !== null) {
            $headerParams['Sensedia-Auth'] = $this->apiClient->getSerializer()->toHeaderValue($sensedia_auth);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\LatencyMetric[]',
                '/metrics/latency'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\LatencyMetric[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\LatencyMetric[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getStatusError1
     *
     * Retrive Status Error
     *
     * @param string $sensedia_auth Sensedia-Auth (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return int
     */
    public function getStatusError1($sensedia_auth = null)
    {
        list($response) = $this->getStatusError1WithHttpInfo($sensedia_auth);
        return $response;
    }

    /**
     * Operation getStatusError1WithHttpInfo
     *
     * Retrive Status Error
     *
     * @param string $sensedia_auth Sensedia-Auth (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of int, HTTP status code, HTTP response headers (array of strings)
     */
    public function getStatusError1WithHttpInfo($sensedia_auth = null)
    {
        // parse inputs
        $resourcePath = "/metrics/statusError";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['*/*']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // header params
        if ($sensedia_auth !== null) {
            $headerParams['Sensedia-Auth'] = $this->apiClient->getSerializer()->toHeaderValue($sensedia_auth);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                'int',
                '/metrics/statusError'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, 'int', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'int', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getTopAccessTokens1
     *
     * Find top access token
     *
     * @param int $how_many How many (required)
     * @param string $sensedia_auth Sensedia-Auth (optional)
     * @param string $begin_date Begin date (optional)
     * @param string $end_date End date (optional)
     * @param string $status Metric status (optional)
     * @param string $resolution Metric resolution (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\TopAccessToken[]
     */
    public function getTopAccessTokens1($how_many, $sensedia_auth = null, $begin_date = null, $end_date = null, $status = null, $resolution = null)
    {
        list($response) = $this->getTopAccessTokens1WithHttpInfo($how_many, $sensedia_auth, $begin_date, $end_date, $status, $resolution);
        return $response;
    }

    /**
     * Operation getTopAccessTokens1WithHttpInfo
     *
     * Find top access token
     *
     * @param int $how_many How many (required)
     * @param string $sensedia_auth Sensedia-Auth (optional)
     * @param string $begin_date Begin date (optional)
     * @param string $end_date End date (optional)
     * @param string $status Metric status (optional)
     * @param string $resolution Metric resolution (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\TopAccessToken[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getTopAccessTokens1WithHttpInfo($how_many, $sensedia_auth = null, $begin_date = null, $end_date = null, $status = null, $resolution = null)
    {
        // verify the required parameter 'how_many' is set
        if ($how_many === null) {
            throw new \InvalidArgumentException('Missing the required parameter $how_many when calling getTopAccessTokens1');
        }
        // parse inputs
        $resourcePath = "/metrics/top-access-tokens/{howMany}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['*/*']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($begin_date !== null) {
            $queryParams['beginDate'] = $this->apiClient->getSerializer()->toQueryValue($begin_date);
        }
        // query params
        if ($end_date !== null) {
            $queryParams['endDate'] = $this->apiClient->getSerializer()->toQueryValue($end_date);
        }
        // query params
        if ($status !== null) {
            $queryParams['status'] = $this->apiClient->getSerializer()->toQueryValue($status);
        }
        // query params
        if ($resolution !== null) {
            $queryParams['resolution'] = $this->apiClient->getSerializer()->toQueryValue($resolution);
        }
        // header params
        if ($sensedia_auth !== null) {
            $headerParams['Sensedia-Auth'] = $this->apiClient->getSerializer()->toHeaderValue($sensedia_auth);
        }
        // path params
        if ($how_many !== null) {
            $resourcePath = str_replace(
                "{" . "howMany" . "}",
                $this->apiClient->getSerializer()->toPathValue($how_many),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\TopAccessToken[]',
                '/metrics/top-access-tokens/{howMany}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\TopAccessToken[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\TopAccessToken[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getTopApps1
     *
     * Find top apps
     *
     * @param int $how_many How many (required)
     * @param string $sensedia_auth Sensedia-Auth (optional)
     * @param string $begin_date Begin date (optional)
     * @param string $end_date End date (optional)
     * @param string $status Metric status (optional)
     * @param string $resolution Metric resolution (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\TopApp[]
     */
    public function getTopApps1($how_many, $sensedia_auth = null, $begin_date = null, $end_date = null, $status = null, $resolution = null)
    {
        list($response) = $this->getTopApps1WithHttpInfo($how_many, $sensedia_auth, $begin_date, $end_date, $status, $resolution);
        return $response;
    }

    /**
     * Operation getTopApps1WithHttpInfo
     *
     * Find top apps
     *
     * @param int $how_many How many (required)
     * @param string $sensedia_auth Sensedia-Auth (optional)
     * @param string $begin_date Begin date (optional)
     * @param string $end_date End date (optional)
     * @param string $status Metric status (optional)
     * @param string $resolution Metric resolution (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\TopApp[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getTopApps1WithHttpInfo($how_many, $sensedia_auth = null, $begin_date = null, $end_date = null, $status = null, $resolution = null)
    {
        // verify the required parameter 'how_many' is set
        if ($how_many === null) {
            throw new \InvalidArgumentException('Missing the required parameter $how_many when calling getTopApps1');
        }
        // parse inputs
        $resourcePath = "/metrics/top-apps/{howMany}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['*/*']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($begin_date !== null) {
            $queryParams['beginDate'] = $this->apiClient->getSerializer()->toQueryValue($begin_date);
        }
        // query params
        if ($end_date !== null) {
            $queryParams['endDate'] = $this->apiClient->getSerializer()->toQueryValue($end_date);
        }
        // query params
        if ($status !== null) {
            $queryParams['status'] = $this->apiClient->getSerializer()->toQueryValue($status);
        }
        // query params
        if ($resolution !== null) {
            $queryParams['resolution'] = $this->apiClient->getSerializer()->toQueryValue($resolution);
        }
        // header params
        if ($sensedia_auth !== null) {
            $headerParams['Sensedia-Auth'] = $this->apiClient->getSerializer()->toHeaderValue($sensedia_auth);
        }
        // path params
        if ($how_many !== null) {
            $resourcePath = str_replace(
                "{" . "howMany" . "}",
                $this->apiClient->getSerializer()->toPathValue($how_many),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\TopApp[]',
                '/metrics/top-apps/{howMany}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\TopApp[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\TopApp[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
