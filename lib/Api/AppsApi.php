<?php
/**
 * AppsApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * API Manager Portal
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\Configuration;
use \Swagger\Client\ObjectSerializer;

/**
 * AppsApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AppsApi
{
    /**
     * API Client
     *
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Swagger\Client\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     *
     * @return AppsApi
     */
    public function setApiClient(\Swagger\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation appsCount1
     *
     * Retrieve App total
     *
     * @param string $sensedia_auth Sensedia-Auth (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return int
     */
    public function appsCount1($sensedia_auth = null)
    {
        list($response) = $this->appsCount1WithHttpInfo($sensedia_auth);
        return $response;
    }

    /**
     * Operation appsCount1WithHttpInfo
     *
     * Retrieve App total
     *
     * @param string $sensedia_auth Sensedia-Auth (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of int, HTTP status code, HTTP response headers (array of strings)
     */
    public function appsCount1WithHttpInfo($sensedia_auth = null)
    {
        // parse inputs
        $resourcePath = "/apps/count";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // header params
        if ($sensedia_auth !== null) {
            $headerParams['Sensedia-Auth'] = $this->apiClient->getSerializer()->toHeaderValue($sensedia_auth);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                'int',
                '/apps/count'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, 'int', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'int', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createApp1
     *
     * Create a new app
     *
     * @param string $sensedia_auth Sensedia-Auth (optional)
     * @param \Swagger\Client\Model\APP $app_token_bean App json to create a new app. (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\APPResponse
     */
    public function createApp1($sensedia_auth = null, $app_token_bean = null)
    {
        list($response) = $this->createApp1WithHttpInfo($sensedia_auth, $app_token_bean);
        return $response;
    }

    /**
     * Operation createApp1WithHttpInfo
     *
     * Create a new app
     *
     * @param string $sensedia_auth Sensedia-Auth (optional)
     * @param \Swagger\Client\Model\APP $app_token_bean App json to create a new app. (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\APPResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createApp1WithHttpInfo($sensedia_auth = null, $app_token_bean = null)
    {
        // parse inputs
        $resourcePath = "/apps";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['*/*']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // header params
        if ($sensedia_auth !== null) {
            $headerParams['Sensedia-Auth'] = $this->apiClient->getSerializer()->toHeaderValue($sensedia_auth);
        }
        // body params
        $_tempBody = null;
        if (isset($app_token_bean)) {
            $_tempBody = $app_token_bean;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\APPResponse',
                '/apps'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\APPResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\APPResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\APPResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getAppTokenByAppGallery1
     *
     * Return all apps
     *
     * @param string $sensedia_auth Sensedia-Auth (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\APP[]
     */
    public function getAppTokenByAppGallery1($sensedia_auth = null)
    {
        list($response) = $this->getAppTokenByAppGallery1WithHttpInfo($sensedia_auth);
        return $response;
    }

    /**
     * Operation getAppTokenByAppGallery1WithHttpInfo
     *
     * Return all apps
     *
     * @param string $sensedia_auth Sensedia-Auth (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\APP[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getAppTokenByAppGallery1WithHttpInfo($sensedia_auth = null)
    {
        // parse inputs
        $resourcePath = "/apps/gallery";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // header params
        if ($sensedia_auth !== null) {
            $headerParams['Sensedia-Auth'] = $this->apiClient->getSerializer()->toHeaderValue($sensedia_auth);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\APP[]',
                '/apps/gallery'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\APP[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\APP[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getAppTokenByFilter1
     *
     * Find app list by filters
     *
     * @param string $sensedia_auth Sensedia-Auth (optional)
     * @param string $client_id clientId (optional)
     * @param string $name name (optional)
     * @param string $keyword keyword (optional)
     * @param string $status status (optional)
     * @param string $developer developer (optional)
     * @param int $actual_page actualPage (optional)
     * @param int $page_size pageSize (optional)
     * @param string $app_ids appIds (optional)
     * @param string $begin_date beginDate (optional)
     * @param string $end_date endDate (optional)
     * @param string $extra_fields extraFields (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\APP[]
     */
    public function getAppTokenByFilter1($sensedia_auth = null, $client_id = null, $name = null, $keyword = null, $status = null, $developer = null, $actual_page = null, $page_size = null, $app_ids = null, $begin_date = null, $end_date = null, $extra_fields = null)
    {
        list($response) = $this->getAppTokenByFilter1WithHttpInfo($sensedia_auth, $client_id, $name, $keyword, $status, $developer, $actual_page, $page_size, $app_ids, $begin_date, $end_date, $extra_fields);
        return $response;
    }

    /**
     * Operation getAppTokenByFilter1WithHttpInfo
     *
     * Find app list by filters
     *
     * @param string $sensedia_auth Sensedia-Auth (optional)
     * @param string $client_id clientId (optional)
     * @param string $name name (optional)
     * @param string $keyword keyword (optional)
     * @param string $status status (optional)
     * @param string $developer developer (optional)
     * @param int $actual_page actualPage (optional)
     * @param int $page_size pageSize (optional)
     * @param string $app_ids appIds (optional)
     * @param string $begin_date beginDate (optional)
     * @param string $end_date endDate (optional)
     * @param string $extra_fields extraFields (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\APP[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getAppTokenByFilter1WithHttpInfo($sensedia_auth = null, $client_id = null, $name = null, $keyword = null, $status = null, $developer = null, $actual_page = null, $page_size = null, $app_ids = null, $begin_date = null, $end_date = null, $extra_fields = null)
    {
        // parse inputs
        $resourcePath = "/apps";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($client_id !== null) {
            $queryParams['clientId'] = $this->apiClient->getSerializer()->toQueryValue($client_id);
        }
        // query params
        if ($name !== null) {
            $queryParams['name'] = $this->apiClient->getSerializer()->toQueryValue($name);
        }
        // query params
        if ($keyword !== null) {
            $queryParams['keyword'] = $this->apiClient->getSerializer()->toQueryValue($keyword);
        }
        // query params
        if ($status !== null) {
            $queryParams['status'] = $this->apiClient->getSerializer()->toQueryValue($status);
        }
        // query params
        if ($developer !== null) {
            $queryParams['developer'] = $this->apiClient->getSerializer()->toQueryValue($developer);
        }
        // query params
        if ($actual_page !== null) {
            $queryParams['actualPage'] = $this->apiClient->getSerializer()->toQueryValue($actual_page);
        }
        // query params
        if ($page_size !== null) {
            $queryParams['pageSize'] = $this->apiClient->getSerializer()->toQueryValue($page_size);
        }
        // query params
        if ($app_ids !== null) {
            $queryParams['appIds'] = $this->apiClient->getSerializer()->toQueryValue($app_ids);
        }
        // query params
        if ($begin_date !== null) {
            $queryParams['beginDate'] = $this->apiClient->getSerializer()->toQueryValue($begin_date);
        }
        // query params
        if ($end_date !== null) {
            $queryParams['endDate'] = $this->apiClient->getSerializer()->toQueryValue($end_date);
        }
        // query params
        if ($extra_fields !== null) {
            $queryParams['extraFields'] = $this->apiClient->getSerializer()->toQueryValue($extra_fields);
        }
        // header params
        if ($sensedia_auth !== null) {
            $headerParams['Sensedia-Auth'] = $this->apiClient->getSerializer()->toHeaderValue($sensedia_auth);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\APP[]',
                '/apps'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\APP[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\APP[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getAppTokenById1
     *
     * Find app by code
     *
     * @param string $code Client ID (required)
     * @param string $sensedia_auth Sensedia-Auth (optional)
     * @param int $limit_access_tokens Limit the access token return (optional)
     * @param string $code_access_tokens Code access token (optional)
     * @param bool $filter_access_tokens Filter access tokens (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\APP
     */
    public function getAppTokenById1($code, $sensedia_auth = null, $limit_access_tokens = null, $code_access_tokens = null, $filter_access_tokens = null)
    {
        list($response) = $this->getAppTokenById1WithHttpInfo($code, $sensedia_auth, $limit_access_tokens, $code_access_tokens, $filter_access_tokens);
        return $response;
    }

    /**
     * Operation getAppTokenById1WithHttpInfo
     *
     * Find app by code
     *
     * @param string $code Client ID (required)
     * @param string $sensedia_auth Sensedia-Auth (optional)
     * @param int $limit_access_tokens Limit the access token return (optional)
     * @param string $code_access_tokens Code access token (optional)
     * @param bool $filter_access_tokens Filter access tokens (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\APP, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAppTokenById1WithHttpInfo($code, $sensedia_auth = null, $limit_access_tokens = null, $code_access_tokens = null, $filter_access_tokens = null)
    {
        // verify the required parameter 'code' is set
        if ($code === null) {
            throw new \InvalidArgumentException('Missing the required parameter $code when calling getAppTokenById1');
        }
        // parse inputs
        $resourcePath = "/apps/{code}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($limit_access_tokens !== null) {
            $queryParams['limitAccessTokens'] = $this->apiClient->getSerializer()->toQueryValue($limit_access_tokens);
        }
        // query params
        if ($code_access_tokens !== null) {
            $queryParams['codeAccessTokens'] = $this->apiClient->getSerializer()->toQueryValue($code_access_tokens);
        }
        // query params
        if ($filter_access_tokens !== null) {
            $queryParams['filterAccessTokens'] = $this->apiClient->getSerializer()->toQueryValue($filter_access_tokens);
        }
        // header params
        if ($sensedia_auth !== null) {
            $headerParams['Sensedia-Auth'] = $this->apiClient->getSerializer()->toHeaderValue($sensedia_auth);
        }
        // path params
        if ($code !== null) {
            $resourcePath = str_replace(
                "{" . "code" . "}",
                $this->apiClient->getSerializer()->toPathValue($code),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\APP',
                '/apps/{code}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\APP', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\APP', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getChangeLogByAppId1
     *
     * Retrive changelog per app id
     *
     * @param int $id id (required)
     * @param string $sensedia_auth Sensedia-Auth (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\ChangeLogBean[]
     */
    public function getChangeLogByAppId1($id, $sensedia_auth = null)
    {
        list($response) = $this->getChangeLogByAppId1WithHttpInfo($id, $sensedia_auth);
        return $response;
    }

    /**
     * Operation getChangeLogByAppId1WithHttpInfo
     *
     * Retrive changelog per app id
     *
     * @param int $id id (required)
     * @param string $sensedia_auth Sensedia-Auth (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\ChangeLogBean[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getChangeLogByAppId1WithHttpInfo($id, $sensedia_auth = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling getChangeLogByAppId1');
        }
        // parse inputs
        $resourcePath = "/apps/{code}/changelog";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // header params
        if ($sensedia_auth !== null) {
            $headerParams['Sensedia-Auth'] = $this->apiClient->getSerializer()->toHeaderValue($sensedia_auth);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ChangeLogBean[]',
                '/apps/{code}/changelog'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ChangeLogBean[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ChangeLogBean[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation removeApp1
     *
     * Delete a app
     *
     * @param string $id id (required)
     * @param string $sensedia_auth Sensedia-Auth (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function removeApp1($id, $sensedia_auth = null)
    {
        list($response) = $this->removeApp1WithHttpInfo($id, $sensedia_auth);
        return $response;
    }

    /**
     * Operation removeApp1WithHttpInfo
     *
     * Delete a app
     *
     * @param string $id id (required)
     * @param string $sensedia_auth Sensedia-Auth (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function removeApp1WithHttpInfo($id, $sensedia_auth = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling removeApp1');
        }
        // parse inputs
        $resourcePath = "/apps/{code}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // header params
        if ($sensedia_auth !== null) {
            $headerParams['Sensedia-Auth'] = $this->apiClient->getSerializer()->toHeaderValue($sensedia_auth);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/apps/{code}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation updateApp1
     *
     * Update a app
     *
     * @param string $id App json to update a app. (required)
     * @param \Swagger\Client\Model\APP $app_token_bean appTokenBean (required)
     * @param string $sensedia_auth Sensedia-Auth (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\APPResponse
     */
    public function updateApp1($id, $app_token_bean, $sensedia_auth = null)
    {
        list($response) = $this->updateApp1WithHttpInfo($id, $app_token_bean, $sensedia_auth);
        return $response;
    }

    /**
     * Operation updateApp1WithHttpInfo
     *
     * Update a app
     *
     * @param string $id App json to update a app. (required)
     * @param \Swagger\Client\Model\APP $app_token_bean appTokenBean (required)
     * @param string $sensedia_auth Sensedia-Auth (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\APPResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateApp1WithHttpInfo($id, $app_token_bean, $sensedia_auth = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling updateApp1');
        }
        // verify the required parameter 'app_token_bean' is set
        if ($app_token_bean === null) {
            throw new \InvalidArgumentException('Missing the required parameter $app_token_bean when calling updateApp1');
        }
        // parse inputs
        $resourcePath = "/apps/{id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['*/*']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // header params
        if ($sensedia_auth !== null) {
            $headerParams['Sensedia-Auth'] = $this->apiClient->getSerializer()->toHeaderValue($sensedia_auth);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($app_token_bean)) {
            $_tempBody = $app_token_bean;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\APPResponse',
                '/apps/{id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\APPResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\APPResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation validatePartialApp1
     *
     * Validate partial app
     *
     * @param string $sensedia_auth Sensedia-Auth (optional)
     * @param \Swagger\Client\Model\APP $app_token_bean App json to validate app (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return object
     */
    public function validatePartialApp1($sensedia_auth = null, $app_token_bean = null)
    {
        list($response) = $this->validatePartialApp1WithHttpInfo($sensedia_auth, $app_token_bean);
        return $response;
    }

    /**
     * Operation validatePartialApp1WithHttpInfo
     *
     * Validate partial app
     *
     * @param string $sensedia_auth Sensedia-Auth (optional)
     * @param \Swagger\Client\Model\APP $app_token_bean App json to validate app (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function validatePartialApp1WithHttpInfo($sensedia_auth = null, $app_token_bean = null)
    {
        // parse inputs
        $resourcePath = "/apps/validate";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['*/*']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // header params
        if ($sensedia_auth !== null) {
            $headerParams['Sensedia-Auth'] = $this->apiClient->getSerializer()->toHeaderValue($sensedia_auth);
        }
        // body params
        $_tempBody = null;
        if (isset($app_token_bean)) {
            $_tempBody = $app_token_bean;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                'object',
                '/apps/validate'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, 'object', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'object', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
