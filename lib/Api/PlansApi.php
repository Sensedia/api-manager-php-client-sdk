<?php
/**
 * PlansApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * API Manager Portal
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\Configuration;
use \Swagger\Client\ObjectSerializer;

/**
 * PlansApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PlansApi
{
    /**
     * API Client
     *
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Swagger\Client\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     *
     * @return PlansApi
     */
    public function setApiClient(\Swagger\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation clonePlan1
     *
     * Clone a plan
     *
     * @param string $id Plan id (required)
     * @param string $sensedia_auth Sensedia-Auth (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\PlanResponse
     */
    public function clonePlan1($id, $sensedia_auth = null)
    {
        list($response) = $this->clonePlan1WithHttpInfo($id, $sensedia_auth);
        return $response;
    }

    /**
     * Operation clonePlan1WithHttpInfo
     *
     * Clone a plan
     *
     * @param string $id Plan id (required)
     * @param string $sensedia_auth Sensedia-Auth (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\PlanResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function clonePlan1WithHttpInfo($id, $sensedia_auth = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling clonePlan1');
        }
        // parse inputs
        $resourcePath = "/plans/{id}/clone";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['*/*']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // header params
        if ($sensedia_auth !== null) {
            $headerParams['Sensedia-Auth'] = $this->apiClient->getSerializer()->toHeaderValue($sensedia_auth);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\PlanResponse',
                '/plans/{id}/clone'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\PlanResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\PlanResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\PlanResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createPlan1
     *
     * Create a new plan
     *
     * @param \Swagger\Client\Model\PlanResponse $plan_bean planBean (required)
     * @param string $sensedia_auth Sensedia-Auth (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\PlanResponse
     */
    public function createPlan1($plan_bean, $sensedia_auth = null)
    {
        list($response) = $this->createPlan1WithHttpInfo($plan_bean, $sensedia_auth);
        return $response;
    }

    /**
     * Operation createPlan1WithHttpInfo
     *
     * Create a new plan
     *
     * @param \Swagger\Client\Model\PlanResponse $plan_bean planBean (required)
     * @param string $sensedia_auth Sensedia-Auth (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\PlanResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createPlan1WithHttpInfo($plan_bean, $sensedia_auth = null)
    {
        // verify the required parameter 'plan_bean' is set
        if ($plan_bean === null) {
            throw new \InvalidArgumentException('Missing the required parameter $plan_bean when calling createPlan1');
        }
        // parse inputs
        $resourcePath = "/plans";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['*/*']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // header params
        if ($sensedia_auth !== null) {
            $headerParams['Sensedia-Auth'] = $this->apiClient->getSerializer()->toHeaderValue($sensedia_auth);
        }
        // body params
        $_tempBody = null;
        if (isset($plan_bean)) {
            $_tempBody = $plan_bean;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\PlanResponse',
                '/plans'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\PlanResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\PlanResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getAllPlan1
     *
     * Return all plan
     *
     * @param string $sensedia_auth Sensedia-Auth (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\PlanResponse[]
     */
    public function getAllPlan1($sensedia_auth = null)
    {
        list($response) = $this->getAllPlan1WithHttpInfo($sensedia_auth);
        return $response;
    }

    /**
     * Operation getAllPlan1WithHttpInfo
     *
     * Return all plan
     *
     * @param string $sensedia_auth Sensedia-Auth (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\PlanResponse[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getAllPlan1WithHttpInfo($sensedia_auth = null)
    {
        // parse inputs
        $resourcePath = "/plans";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // header params
        if ($sensedia_auth !== null) {
            $headerParams['Sensedia-Auth'] = $this->apiClient->getSerializer()->toHeaderValue($sensedia_auth);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\PlanResponse[]',
                '/plans'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\PlanResponse[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\PlanResponse[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getChangeLogByPlanId1
     *
     * Retrive changelog per plan id
     *
     * @param int $id id (required)
     * @param string $sensedia_auth Sensedia-Auth (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\ChangeLogBean[]
     */
    public function getChangeLogByPlanId1($id, $sensedia_auth = null)
    {
        list($response) = $this->getChangeLogByPlanId1WithHttpInfo($id, $sensedia_auth);
        return $response;
    }

    /**
     * Operation getChangeLogByPlanId1WithHttpInfo
     *
     * Retrive changelog per plan id
     *
     * @param int $id id (required)
     * @param string $sensedia_auth Sensedia-Auth (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\ChangeLogBean[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getChangeLogByPlanId1WithHttpInfo($id, $sensedia_auth = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling getChangeLogByPlanId1');
        }
        // parse inputs
        $resourcePath = "/plans/{id}/changelog";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // header params
        if ($sensedia_auth !== null) {
            $headerParams['Sensedia-Auth'] = $this->apiClient->getSerializer()->toHeaderValue($sensedia_auth);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ChangeLogBean[]',
                '/plans/{id}/changelog'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ChangeLogBean[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ChangeLogBean[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getPlanById1
     *
     * Find plan by id
     *
     * @param string $id id (required)
     * @param string $sensedia_auth Sensedia-Auth (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\PlanResponse
     */
    public function getPlanById1($id, $sensedia_auth = null)
    {
        list($response) = $this->getPlanById1WithHttpInfo($id, $sensedia_auth);
        return $response;
    }

    /**
     * Operation getPlanById1WithHttpInfo
     *
     * Find plan by id
     *
     * @param string $id id (required)
     * @param string $sensedia_auth Sensedia-Auth (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\PlanResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPlanById1WithHttpInfo($id, $sensedia_auth = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling getPlanById1');
        }
        // parse inputs
        $resourcePath = "/plans/{id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // header params
        if ($sensedia_auth !== null) {
            $headerParams['Sensedia-Auth'] = $this->apiClient->getSerializer()->toHeaderValue($sensedia_auth);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\PlanResponse',
                '/plans/{id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\PlanResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\PlanResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getPlanDefaultByApiId1
     *
     * Find default plan by api id
     *
     * @param string $id Api id (required)
     * @param string $sensedia_auth Sensedia-Auth (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\PlanResponse
     */
    public function getPlanDefaultByApiId1($id, $sensedia_auth = null)
    {
        list($response) = $this->getPlanDefaultByApiId1WithHttpInfo($id, $sensedia_auth);
        return $response;
    }

    /**
     * Operation getPlanDefaultByApiId1WithHttpInfo
     *
     * Find default plan by api id
     *
     * @param string $id Api id (required)
     * @param string $sensedia_auth Sensedia-Auth (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\PlanResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPlanDefaultByApiId1WithHttpInfo($id, $sensedia_auth = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling getPlanDefaultByApiId1');
        }
        // parse inputs
        $resourcePath = "/plans/{id}/defaultPlan";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // header params
        if ($sensedia_auth !== null) {
            $headerParams['Sensedia-Auth'] = $this->apiClient->getSerializer()->toHeaderValue($sensedia_auth);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\PlanResponse',
                '/plans/{id}/defaultPlan'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\PlanResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\PlanResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation plansCount1
     *
     * Retrieve plan total
     *
     * @param string $sensedia_auth Sensedia-Auth (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return int
     */
    public function plansCount1($sensedia_auth = null)
    {
        list($response) = $this->plansCount1WithHttpInfo($sensedia_auth);
        return $response;
    }

    /**
     * Operation plansCount1WithHttpInfo
     *
     * Retrieve plan total
     *
     * @param string $sensedia_auth Sensedia-Auth (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of int, HTTP status code, HTTP response headers (array of strings)
     */
    public function plansCount1WithHttpInfo($sensedia_auth = null)
    {
        // parse inputs
        $resourcePath = "/plans/count";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // header params
        if ($sensedia_auth !== null) {
            $headerParams['Sensedia-Auth'] = $this->apiClient->getSerializer()->toHeaderValue($sensedia_auth);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                'int',
                '/plans/count'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, 'int', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'int', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation removePlan1
     *
     * Delete a plan
     *
     * @param string $id Plan id (required)
     * @param string $sensedia_auth Sensedia-Auth (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\ResponseEntity
     */
    public function removePlan1($id, $sensedia_auth = null)
    {
        list($response) = $this->removePlan1WithHttpInfo($id, $sensedia_auth);
        return $response;
    }

    /**
     * Operation removePlan1WithHttpInfo
     *
     * Delete a plan
     *
     * @param string $id Plan id (required)
     * @param string $sensedia_auth Sensedia-Auth (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\ResponseEntity, HTTP status code, HTTP response headers (array of strings)
     */
    public function removePlan1WithHttpInfo($id, $sensedia_auth = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling removePlan1');
        }
        // parse inputs
        $resourcePath = "/plans/{id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // header params
        if ($sensedia_auth !== null) {
            $headerParams['Sensedia-Auth'] = $this->apiClient->getSerializer()->toHeaderValue($sensedia_auth);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ResponseEntity',
                '/plans/{id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ResponseEntity', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ResponseEntity', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 204:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ResponseEntity', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updatePlan1
     *
     * Update a plan
     *
     * @param string $id Plan id (required)
     * @param string $sensedia_auth Sensedia-Auth (optional)
     * @param \Swagger\Client\Model\PlanResponse $plan_bean Plan json to update a plan (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\PlanResponse
     */
    public function updatePlan1($id, $sensedia_auth = null, $plan_bean = null)
    {
        list($response) = $this->updatePlan1WithHttpInfo($id, $sensedia_auth, $plan_bean);
        return $response;
    }

    /**
     * Operation updatePlan1WithHttpInfo
     *
     * Update a plan
     *
     * @param string $id Plan id (required)
     * @param string $sensedia_auth Sensedia-Auth (optional)
     * @param \Swagger\Client\Model\PlanResponse $plan_bean Plan json to update a plan (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\PlanResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updatePlan1WithHttpInfo($id, $sensedia_auth = null, $plan_bean = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling updatePlan1');
        }
        // parse inputs
        $resourcePath = "/plans/{id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // header params
        if ($sensedia_auth !== null) {
            $headerParams['Sensedia-Auth'] = $this->apiClient->getSerializer()->toHeaderValue($sensedia_auth);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($plan_bean)) {
            $_tempBody = $plan_bean;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\PlanResponse',
                '/plans/{id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\PlanResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\PlanResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation validatePartialPlan1
     *
     * Validate partial a plan
     *
     * @param string $sensedia_auth Sensedia-Auth (optional)
     * @param \Swagger\Client\Model\PlanResponse $plan_bean Plan json to validate a plan (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\ResponseEntity
     */
    public function validatePartialPlan1($sensedia_auth = null, $plan_bean = null)
    {
        list($response) = $this->validatePartialPlan1WithHttpInfo($sensedia_auth, $plan_bean);
        return $response;
    }

    /**
     * Operation validatePartialPlan1WithHttpInfo
     *
     * Validate partial a plan
     *
     * @param string $sensedia_auth Sensedia-Auth (optional)
     * @param \Swagger\Client\Model\PlanResponse $plan_bean Plan json to validate a plan (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\ResponseEntity, HTTP status code, HTTP response headers (array of strings)
     */
    public function validatePartialPlan1WithHttpInfo($sensedia_auth = null, $plan_bean = null)
    {
        // parse inputs
        $resourcePath = "/plans/validate";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['*/*']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // header params
        if ($sensedia_auth !== null) {
            $headerParams['Sensedia-Auth'] = $this->apiClient->getSerializer()->toHeaderValue($sensedia_auth);
        }
        // body params
        $_tempBody = null;
        if (isset($plan_bean)) {
            $_tempBody = $plan_bean;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ResponseEntity',
                '/plans/validate'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ResponseEntity', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ResponseEntity', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
