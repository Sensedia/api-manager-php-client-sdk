<?php
/**
 * CallsApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * API Manager Portal
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\Configuration;
use \Swagger\Client\ObjectSerializer;

/**
 * CallsApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CallsApi
{
    /**
     * API Client
     *
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Swagger\Client\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     *
     * @return CallsApi
     */
    public function setApiClient(\Swagger\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation retriveCallById1
     *
     * Retrive call by id
     *
     * @param string $id Call id (required)
     * @param string $sensedia_auth Sensedia-Auth (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\Call
     */
    public function retriveCallById1($id, $sensedia_auth = null)
    {
        list($response) = $this->retriveCallById1WithHttpInfo($id, $sensedia_auth);
        return $response;
    }

    /**
     * Operation retriveCallById1WithHttpInfo
     *
     * Retrive call by id
     *
     * @param string $id Call id (required)
     * @param string $sensedia_auth Sensedia-Auth (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\Call, HTTP status code, HTTP response headers (array of strings)
     */
    public function retriveCallById1WithHttpInfo($id, $sensedia_auth = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling retriveCallById1');
        }
        // parse inputs
        $resourcePath = "/calls/{id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['*/*']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // header params
        if ($sensedia_auth !== null) {
            $headerParams['Sensedia-Auth'] = $this->apiClient->getSerializer()->toHeaderValue($sensedia_auth);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Call',
                '/calls/{id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Call', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Call', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation retriveCallsWithFiltrs1
     *
     * Retrive calls with filters
     *
     * @param string $sensedia_auth Sensedia-Auth (optional)
     * @param int $actual_page Number of the page in pagination. The starting page number is zero. (optional)
     * @param string $base_uris Base uris (optional)
     * @param string $app_token_code Code app token (optional)
     * @param int $page_size Define the size of the returned list of developers. (optional)
     * @param string $app_token_name Name app token (optional)
     * @param string $auth_token_owner Owner auth token (optional)
     * @param int $api_id API id (optional)
     * @param int $operation_id Operation id (optional)
     * @param int $resource_id Resource id (optional)
     * @param int $environment_id Environment id (optional)
     * @param int $revision_id Revision id (optional)
     * @param string $uri URI (optional)
     * @param string $custom_search Custom search (optional)
     * @param string $method HTTP Method (GET, POST, PUT, DELETE, PATCH, OPTIONS, HEAD) (optional)
     * @param int $http_status_from HTTP status from (optional)
     * @param int $http_status_to HTTP status to (optional)
     * @param string $begin_date Begin date (optional)
     * @param string $end_date End date (optional)
     * @param string $app_developer APP Developer (optional)
     * @param string $force_download Force archive download (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\CallResponse
     */
    public function retriveCallsWithFiltrs1($sensedia_auth = null, $actual_page = null, $base_uris = null, $app_token_code = null, $page_size = null, $app_token_name = null, $auth_token_owner = null, $api_id = null, $operation_id = null, $resource_id = null, $environment_id = null, $revision_id = null, $uri = null, $custom_search = null, $method = null, $http_status_from = null, $http_status_to = null, $begin_date = null, $end_date = null, $app_developer = null, $force_download = null)
    {
        list($response) = $this->retriveCallsWithFiltrs1WithHttpInfo($sensedia_auth, $actual_page, $base_uris, $app_token_code, $page_size, $app_token_name, $auth_token_owner, $api_id, $operation_id, $resource_id, $environment_id, $revision_id, $uri, $custom_search, $method, $http_status_from, $http_status_to, $begin_date, $end_date, $app_developer, $force_download);
        return $response;
    }

    /**
     * Operation retriveCallsWithFiltrs1WithHttpInfo
     *
     * Retrive calls with filters
     *
     * @param string $sensedia_auth Sensedia-Auth (optional)
     * @param int $actual_page Number of the page in pagination. The starting page number is zero. (optional)
     * @param string $base_uris Base uris (optional)
     * @param string $app_token_code Code app token (optional)
     * @param int $page_size Define the size of the returned list of developers. (optional)
     * @param string $app_token_name Name app token (optional)
     * @param string $auth_token_owner Owner auth token (optional)
     * @param int $api_id API id (optional)
     * @param int $operation_id Operation id (optional)
     * @param int $resource_id Resource id (optional)
     * @param int $environment_id Environment id (optional)
     * @param int $revision_id Revision id (optional)
     * @param string $uri URI (optional)
     * @param string $custom_search Custom search (optional)
     * @param string $method HTTP Method (GET, POST, PUT, DELETE, PATCH, OPTIONS, HEAD) (optional)
     * @param int $http_status_from HTTP status from (optional)
     * @param int $http_status_to HTTP status to (optional)
     * @param string $begin_date Begin date (optional)
     * @param string $end_date End date (optional)
     * @param string $app_developer APP Developer (optional)
     * @param string $force_download Force archive download (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\CallResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function retriveCallsWithFiltrs1WithHttpInfo($sensedia_auth = null, $actual_page = null, $base_uris = null, $app_token_code = null, $page_size = null, $app_token_name = null, $auth_token_owner = null, $api_id = null, $operation_id = null, $resource_id = null, $environment_id = null, $revision_id = null, $uri = null, $custom_search = null, $method = null, $http_status_from = null, $http_status_to = null, $begin_date = null, $end_date = null, $app_developer = null, $force_download = null)
    {
        // parse inputs
        $resourcePath = "/calls";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['*/*']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($actual_page !== null) {
            $queryParams['actualPage'] = $this->apiClient->getSerializer()->toQueryValue($actual_page);
        }
        // query params
        if ($base_uris !== null) {
            $queryParams['baseUris'] = $this->apiClient->getSerializer()->toQueryValue($base_uris);
        }
        // query params
        if ($app_token_code !== null) {
            $queryParams['appTokenCode'] = $this->apiClient->getSerializer()->toQueryValue($app_token_code);
        }
        // query params
        if ($page_size !== null) {
            $queryParams['pageSize'] = $this->apiClient->getSerializer()->toQueryValue($page_size);
        }
        // query params
        if ($app_token_name !== null) {
            $queryParams['appTokenName'] = $this->apiClient->getSerializer()->toQueryValue($app_token_name);
        }
        // query params
        if ($auth_token_owner !== null) {
            $queryParams['authTokenOwner'] = $this->apiClient->getSerializer()->toQueryValue($auth_token_owner);
        }
        // query params
        if ($api_id !== null) {
            $queryParams['apiId'] = $this->apiClient->getSerializer()->toQueryValue($api_id);
        }
        // query params
        if ($operation_id !== null) {
            $queryParams['operationId'] = $this->apiClient->getSerializer()->toQueryValue($operation_id);
        }
        // query params
        if ($resource_id !== null) {
            $queryParams['resourceId'] = $this->apiClient->getSerializer()->toQueryValue($resource_id);
        }
        // query params
        if ($environment_id !== null) {
            $queryParams['environmentId'] = $this->apiClient->getSerializer()->toQueryValue($environment_id);
        }
        // query params
        if ($revision_id !== null) {
            $queryParams['revisionId'] = $this->apiClient->getSerializer()->toQueryValue($revision_id);
        }
        // query params
        if ($uri !== null) {
            $queryParams['uri'] = $this->apiClient->getSerializer()->toQueryValue($uri);
        }
        // query params
        if ($custom_search !== null) {
            $queryParams['customSearch'] = $this->apiClient->getSerializer()->toQueryValue($custom_search);
        }
        // query params
        if ($method !== null) {
            $queryParams['method'] = $this->apiClient->getSerializer()->toQueryValue($method);
        }
        // query params
        if ($http_status_from !== null) {
            $queryParams['httpStatusFrom'] = $this->apiClient->getSerializer()->toQueryValue($http_status_from);
        }
        // query params
        if ($http_status_to !== null) {
            $queryParams['httpStatusTo'] = $this->apiClient->getSerializer()->toQueryValue($http_status_to);
        }
        // query params
        if ($begin_date !== null) {
            $queryParams['beginDate'] = $this->apiClient->getSerializer()->toQueryValue($begin_date);
        }
        // query params
        if ($end_date !== null) {
            $queryParams['endDate'] = $this->apiClient->getSerializer()->toQueryValue($end_date);
        }
        // query params
        if ($app_developer !== null) {
            $queryParams['appDeveloper'] = $this->apiClient->getSerializer()->toQueryValue($app_developer);
        }
        // query params
        if ($force_download !== null) {
            $queryParams['forceDownload'] = $this->apiClient->getSerializer()->toQueryValue($force_download);
        }
        // header params
        if ($sensedia_auth !== null) {
            $headerParams['Sensedia-Auth'] = $this->apiClient->getSerializer()->toHeaderValue($sensedia_auth);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\CallResponse',
                '/calls'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\CallResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\CallResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation retriveTotalCallsByDate1
     *
     * Retrive calls total by date
     *
     * @param string $date Date searched (required)
     * @param string $sensedia_auth Sensedia-Auth (optional)
     * @param int $api_id API id (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return int
     */
    public function retriveTotalCallsByDate1($date, $sensedia_auth = null, $api_id = null)
    {
        list($response) = $this->retriveTotalCallsByDate1WithHttpInfo($date, $sensedia_auth, $api_id);
        return $response;
    }

    /**
     * Operation retriveTotalCallsByDate1WithHttpInfo
     *
     * Retrive calls total by date
     *
     * @param string $date Date searched (required)
     * @param string $sensedia_auth Sensedia-Auth (optional)
     * @param int $api_id API id (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of int, HTTP status code, HTTP response headers (array of strings)
     */
    public function retriveTotalCallsByDate1WithHttpInfo($date, $sensedia_auth = null, $api_id = null)
    {
        // verify the required parameter 'date' is set
        if ($date === null) {
            throw new \InvalidArgumentException('Missing the required parameter $date when calling retriveTotalCallsByDate1');
        }
        // parse inputs
        $resourcePath = "/calls/count/{date}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['*/*']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($api_id !== null) {
            $queryParams['apiId'] = $this->apiClient->getSerializer()->toQueryValue($api_id);
        }
        // header params
        if ($sensedia_auth !== null) {
            $headerParams['Sensedia-Auth'] = $this->apiClient->getSerializer()->toHeaderValue($sensedia_auth);
        }
        // path params
        if ($date !== null) {
            $resourcePath = str_replace(
                "{" . "date" . "}",
                $this->apiClient->getSerializer()->toPathValue($date),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                'int',
                '/calls/count/{date}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, 'int', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'int', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
