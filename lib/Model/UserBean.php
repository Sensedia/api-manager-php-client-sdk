<?php
/**
 * UserBean
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * API Manager Portal
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * UserBean Class Doc Comment
 *
 * @category    Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class UserBean implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'UserBean';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'email' => 'string',
        'has_all_permissions' => 'bool',
        'id' => 'int',
        'image' => 'string',
        'login' => 'string',
        'name' => 'string',
        'password' => 'string',
        'password_confirm' => 'string',
        'roles' => '\Swagger\Client\Model\RoleBean[]',
        'team_user_id' => 'int',
        'teams' => '\Swagger\Client\Model\TeamBean[]',
        'user_type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'email' => null,
        'has_all_permissions' => null,
        'id' => 'int64',
        'image' => null,
        'login' => null,
        'name' => null,
        'password' => null,
        'password_confirm' => null,
        'roles' => null,
        'team_user_id' => 'int64',
        'teams' => null,
        'user_type' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'email' => 'email',
        'has_all_permissions' => 'hasAllPermissions',
        'id' => 'id',
        'image' => 'image',
        'login' => 'login',
        'name' => 'name',
        'password' => 'password',
        'password_confirm' => 'passwordConfirm',
        'roles' => 'roles',
        'team_user_id' => 'teamUserId',
        'teams' => 'teams',
        'user_type' => 'userType'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'email' => 'setEmail',
        'has_all_permissions' => 'setHasAllPermissions',
        'id' => 'setId',
        'image' => 'setImage',
        'login' => 'setLogin',
        'name' => 'setName',
        'password' => 'setPassword',
        'password_confirm' => 'setPasswordConfirm',
        'roles' => 'setRoles',
        'team_user_id' => 'setTeamUserId',
        'teams' => 'setTeams',
        'user_type' => 'setUserType'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'email' => 'getEmail',
        'has_all_permissions' => 'getHasAllPermissions',
        'id' => 'getId',
        'image' => 'getImage',
        'login' => 'getLogin',
        'name' => 'getName',
        'password' => 'getPassword',
        'password_confirm' => 'getPasswordConfirm',
        'roles' => 'getRoles',
        'team_user_id' => 'getTeamUserId',
        'teams' => 'getTeams',
        'user_type' => 'getUserType'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const USER_TYPE_DATABASE = 'DATABASE';
    const USER_TYPE_LDAP = 'LDAP';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getUserTypeAllowableValues()
    {
        return [
            self::USER_TYPE_DATABASE,
            self::USER_TYPE_LDAP,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['has_all_permissions'] = isset($data['has_all_permissions']) ? $data['has_all_permissions'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['image'] = isset($data['image']) ? $data['image'] : null;
        $this->container['login'] = isset($data['login']) ? $data['login'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['password'] = isset($data['password']) ? $data['password'] : null;
        $this->container['password_confirm'] = isset($data['password_confirm']) ? $data['password_confirm'] : null;
        $this->container['roles'] = isset($data['roles']) ? $data['roles'] : null;
        $this->container['team_user_id'] = isset($data['team_user_id']) ? $data['team_user_id'] : null;
        $this->container['teams'] = isset($data['teams']) ? $data['teams'] : null;
        $this->container['user_type'] = isset($data['user_type']) ? $data['user_type'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        $allowed_values = $this->getUserTypeAllowableValues();
        if (!in_array($this->container['user_type'], $allowed_values)) {
            $invalid_properties[] = sprintf(
                "invalid value for 'user_type', must be one of '%s'",
                implode("', '", $allowed_values)
            );
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        $allowed_values = $this->getUserTypeAllowableValues();
        if (!in_array($this->container['user_type'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets email
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     * @param string $email
     * @return $this
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets has_all_permissions
     * @return bool
     */
    public function getHasAllPermissions()
    {
        return $this->container['has_all_permissions'];
    }

    /**
     * Sets has_all_permissions
     * @param bool $has_all_permissions
     * @return $this
     */
    public function setHasAllPermissions($has_all_permissions)
    {
        $this->container['has_all_permissions'] = $has_all_permissions;

        return $this;
    }

    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets image
     * @return string
     */
    public function getImage()
    {
        return $this->container['image'];
    }

    /**
     * Sets image
     * @param string $image
     * @return $this
     */
    public function setImage($image)
    {
        $this->container['image'] = $image;

        return $this;
    }

    /**
     * Gets login
     * @return string
     */
    public function getLogin()
    {
        return $this->container['login'];
    }

    /**
     * Sets login
     * @param string $login
     * @return $this
     */
    public function setLogin($login)
    {
        $this->container['login'] = $login;

        return $this;
    }

    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     * @param string $name
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets password
     * @return string
     */
    public function getPassword()
    {
        return $this->container['password'];
    }

    /**
     * Sets password
     * @param string $password
     * @return $this
     */
    public function setPassword($password)
    {
        $this->container['password'] = $password;

        return $this;
    }

    /**
     * Gets password_confirm
     * @return string
     */
    public function getPasswordConfirm()
    {
        return $this->container['password_confirm'];
    }

    /**
     * Sets password_confirm
     * @param string $password_confirm
     * @return $this
     */
    public function setPasswordConfirm($password_confirm)
    {
        $this->container['password_confirm'] = $password_confirm;

        return $this;
    }

    /**
     * Gets roles
     * @return \Swagger\Client\Model\RoleBean[]
     */
    public function getRoles()
    {
        return $this->container['roles'];
    }

    /**
     * Sets roles
     * @param \Swagger\Client\Model\RoleBean[] $roles
     * @return $this
     */
    public function setRoles($roles)
    {
        $this->container['roles'] = $roles;

        return $this;
    }

    /**
     * Gets team_user_id
     * @return int
     */
    public function getTeamUserId()
    {
        return $this->container['team_user_id'];
    }

    /**
     * Sets team_user_id
     * @param int $team_user_id
     * @return $this
     */
    public function setTeamUserId($team_user_id)
    {
        $this->container['team_user_id'] = $team_user_id;

        return $this;
    }

    /**
     * Gets teams
     * @return \Swagger\Client\Model\TeamBean[]
     */
    public function getTeams()
    {
        return $this->container['teams'];
    }

    /**
     * Sets teams
     * @param \Swagger\Client\Model\TeamBean[] $teams
     * @return $this
     */
    public function setTeams($teams)
    {
        $this->container['teams'] = $teams;

        return $this;
    }

    /**
     * Gets user_type
     * @return string
     */
    public function getUserType()
    {
        return $this->container['user_type'];
    }

    /**
     * Sets user_type
     * @param string $user_type
     * @return $this
     */
    public function setUserType($user_type)
    {
        $allowed_values = $this->getUserTypeAllowableValues();
        if (!is_null($user_type) && !in_array($user_type, $allowed_values)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'user_type', must be one of '%s'",
                    implode("', '", $allowed_values)
                )
            );
        }
        $this->container['user_type'] = $user_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


