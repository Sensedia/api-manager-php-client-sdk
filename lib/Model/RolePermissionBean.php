<?php
/**
 * RolePermissionBean
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * API Manager Portal
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * RolePermissionBean Class Doc Comment
 *
 * @category    Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class RolePermissionBean implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'RolePermissionBean';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'permission' => 'string',
        'type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int64',
        'permission' => null,
        'type' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'permission' => 'permission',
        'type' => 'type'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'permission' => 'setPermission',
        'type' => 'setType'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'permission' => 'getPermission',
        'type' => 'getType'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const PERMISSION_DASHBOARD = 'DASHBOARD';
    const PERMISSION_ANALYTICS = 'ANALYTICS';
    const PERMISSION_APIS_HEALTH = 'APIS_HEALTH';
    const PERMISSION_APIS = 'APIS';
    const PERMISSION_BAAS = 'BAAS';
    const PERMISSION_NOTIFICATIONS = 'NOTIFICATIONS';
    const PERMISSION_PLANS = 'PLANS';
    const PERMISSION_APPS = 'APPS';
    const PERMISSION_ACCESS_TOKENS = 'ACCESS_TOKENS';
    const PERMISSION_SECRETS = 'SECRETS';
    const PERMISSION_DEVELOPERS = 'DEVELOPERS';
    const PERMISSION_TRACE = 'TRACE';
    const PERMISSION_ENVIRONMENTS = 'ENVIRONMENTS';
    const PERMISSION_CALLBACKS = 'CALLBACKS';
    const PERMISSION_HEALTH_CHECKS = 'HEALTH_CHECKS';
    const PERMISSION_USERS = 'USERS';
    const PERMISSION_ROLES = 'ROLES';
    const PERMISSION_TEAMS = 'TEAMS';
    const PERMISSION_AUDIT = 'AUDIT';
    const PERMISSION_OAUTH = 'OAUTH';
    const PERMISSION_LDAP = 'LDAP';
    const PERMISSION_ROOT = 'ROOT';
    const PERMISSION_NONE = 'NONE';
    const PERMISSION_ALERT = 'ALERT';
    const PERMISSION_MAIL_SETTINGS = 'MAIL_SETTINGS';
    const TYPE_VIEW = 'VIEW';
    const TYPE_EDIT = 'EDIT';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getPermissionAllowableValues()
    {
        return [
            self::PERMISSION_DASHBOARD,
            self::PERMISSION_ANALYTICS,
            self::PERMISSION_APIS_HEALTH,
            self::PERMISSION_APIS,
            self::PERMISSION_BAAS,
            self::PERMISSION_NOTIFICATIONS,
            self::PERMISSION_PLANS,
            self::PERMISSION_APPS,
            self::PERMISSION_ACCESS_TOKENS,
            self::PERMISSION_SECRETS,
            self::PERMISSION_DEVELOPERS,
            self::PERMISSION_TRACE,
            self::PERMISSION_ENVIRONMENTS,
            self::PERMISSION_CALLBACKS,
            self::PERMISSION_HEALTH_CHECKS,
            self::PERMISSION_USERS,
            self::PERMISSION_ROLES,
            self::PERMISSION_TEAMS,
            self::PERMISSION_AUDIT,
            self::PERMISSION_OAUTH,
            self::PERMISSION_LDAP,
            self::PERMISSION_ROOT,
            self::PERMISSION_NONE,
            self::PERMISSION_ALERT,
            self::PERMISSION_MAIL_SETTINGS,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_VIEW,
            self::TYPE_EDIT,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['permission'] = isset($data['permission']) ? $data['permission'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        $allowed_values = $this->getPermissionAllowableValues();
        if (!in_array($this->container['permission'], $allowed_values)) {
            $invalid_properties[] = sprintf(
                "invalid value for 'permission', must be one of '%s'",
                implode("', '", $allowed_values)
            );
        }

        $allowed_values = $this->getTypeAllowableValues();
        if (!in_array($this->container['type'], $allowed_values)) {
            $invalid_properties[] = sprintf(
                "invalid value for 'type', must be one of '%s'",
                implode("', '", $allowed_values)
            );
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        $allowed_values = $this->getPermissionAllowableValues();
        if (!in_array($this->container['permission'], $allowed_values)) {
            return false;
        }
        $allowed_values = $this->getTypeAllowableValues();
        if (!in_array($this->container['type'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets permission
     * @return string
     */
    public function getPermission()
    {
        return $this->container['permission'];
    }

    /**
     * Sets permission
     * @param string $permission
     * @return $this
     */
    public function setPermission($permission)
    {
        $allowed_values = $this->getPermissionAllowableValues();
        if (!is_null($permission) && !in_array($permission, $allowed_values)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'permission', must be one of '%s'",
                    implode("', '", $allowed_values)
                )
            );
        }
        $this->container['permission'] = $permission;

        return $this;
    }

    /**
     * Gets type
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     * @param string $type
     * @return $this
     */
    public function setType($type)
    {
        $allowed_values = $this->getTypeAllowableValues();
        if (!is_null($type) && !in_array($type, $allowed_values)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'type', must be one of '%s'",
                    implode("', '", $allowed_values)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


