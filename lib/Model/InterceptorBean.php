<?php
/**
 * InterceptorBean
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * API Manager Portal
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * InterceptorBean Class Doc Comment
 *
 * @category    Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class InterceptorBean implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'InterceptorBean';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'content' => 'string',
        'execution_point' => 'string',
        'id' => 'int',
        'id_temp' => 'int',
        'operation' => '\Swagger\Client\Model\APIComponentSimpleBean',
        'parent' => '\Swagger\Client\Model\InterceptorReferenceBean',
        'parent_type' => 'string',
        'plan_id' => 'int',
        'position' => 'int',
        'resource' => '\Swagger\Client\Model\APIComponentSimpleBean',
        'revision' => '\Swagger\Client\Model\APIComponentSimpleBean',
        'status' => 'string',
        'type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'content' => null,
        'execution_point' => null,
        'id' => 'int64',
        'id_temp' => 'int64',
        'operation' => null,
        'parent' => null,
        'parent_type' => null,
        'plan_id' => 'int64',
        'position' => 'int32',
        'resource' => null,
        'revision' => null,
        'status' => null,
        'type' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'content' => 'content',
        'execution_point' => 'executionPoint',
        'id' => 'id',
        'id_temp' => 'idTemp',
        'operation' => 'operation',
        'parent' => 'parent',
        'parent_type' => 'parentType',
        'plan_id' => 'planId',
        'position' => 'position',
        'resource' => 'resource',
        'revision' => 'revision',
        'status' => 'status',
        'type' => 'type'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'content' => 'setContent',
        'execution_point' => 'setExecutionPoint',
        'id' => 'setId',
        'id_temp' => 'setIdTemp',
        'operation' => 'setOperation',
        'parent' => 'setParent',
        'parent_type' => 'setParentType',
        'plan_id' => 'setPlanId',
        'position' => 'setPosition',
        'resource' => 'setResource',
        'revision' => 'setRevision',
        'status' => 'setStatus',
        'type' => 'setType'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'content' => 'getContent',
        'execution_point' => 'getExecutionPoint',
        'id' => 'getId',
        'id_temp' => 'getIdTemp',
        'operation' => 'getOperation',
        'parent' => 'getParent',
        'parent_type' => 'getParentType',
        'plan_id' => 'getPlanId',
        'position' => 'getPosition',
        'resource' => 'getResource',
        'revision' => 'getRevision',
        'status' => 'getStatus',
        'type' => 'getType'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const EXECUTION_POINT_FIRST = 'FIRST';
    const EXECUTION_POINT_SECOND = 'SECOND';
    const EXECUTION_POINT_ANY = 'ANY';
    const PARENT_TYPE_REVISION = 'REVISION';
    const PARENT_TYPE_RESOURCE = 'RESOURCE';
    const PARENT_TYPE_OPERATION = 'OPERATION';
    const PARENT_TYPE_PLAN = 'PLAN';
    const STATUS_CHANGED_VALUE = 'CHANGED_VALUE';
    const STATUS_REFERENCE = 'REFERENCE';
    const STATUS_REMOVED = 'REMOVED';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getExecutionPointAllowableValues()
    {
        return [
            self::EXECUTION_POINT_FIRST,
            self::EXECUTION_POINT_SECOND,
            self::EXECUTION_POINT_ANY,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getParentTypeAllowableValues()
    {
        return [
            self::PARENT_TYPE_REVISION,
            self::PARENT_TYPE_RESOURCE,
            self::PARENT_TYPE_OPERATION,
            self::PARENT_TYPE_PLAN,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_CHANGED_VALUE,
            self::STATUS_REFERENCE,
            self::STATUS_REMOVED,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['content'] = isset($data['content']) ? $data['content'] : null;
        $this->container['execution_point'] = isset($data['execution_point']) ? $data['execution_point'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['id_temp'] = isset($data['id_temp']) ? $data['id_temp'] : null;
        $this->container['operation'] = isset($data['operation']) ? $data['operation'] : null;
        $this->container['parent'] = isset($data['parent']) ? $data['parent'] : null;
        $this->container['parent_type'] = isset($data['parent_type']) ? $data['parent_type'] : null;
        $this->container['plan_id'] = isset($data['plan_id']) ? $data['plan_id'] : null;
        $this->container['position'] = isset($data['position']) ? $data['position'] : null;
        $this->container['resource'] = isset($data['resource']) ? $data['resource'] : null;
        $this->container['revision'] = isset($data['revision']) ? $data['revision'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        $allowed_values = $this->getExecutionPointAllowableValues();
        if (!in_array($this->container['execution_point'], $allowed_values)) {
            $invalid_properties[] = sprintf(
                "invalid value for 'execution_point', must be one of '%s'",
                implode("', '", $allowed_values)
            );
        }

        $allowed_values = $this->getParentTypeAllowableValues();
        if (!in_array($this->container['parent_type'], $allowed_values)) {
            $invalid_properties[] = sprintf(
                "invalid value for 'parent_type', must be one of '%s'",
                implode("', '", $allowed_values)
            );
        }

        $allowed_values = $this->getStatusAllowableValues();
        if (!in_array($this->container['status'], $allowed_values)) {
            $invalid_properties[] = sprintf(
                "invalid value for 'status', must be one of '%s'",
                implode("', '", $allowed_values)
            );
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        $allowed_values = $this->getExecutionPointAllowableValues();
        if (!in_array($this->container['execution_point'], $allowed_values)) {
            return false;
        }
        $allowed_values = $this->getParentTypeAllowableValues();
        if (!in_array($this->container['parent_type'], $allowed_values)) {
            return false;
        }
        $allowed_values = $this->getStatusAllowableValues();
        if (!in_array($this->container['status'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets content
     * @return string
     */
    public function getContent()
    {
        return $this->container['content'];
    }

    /**
     * Sets content
     * @param string $content
     * @return $this
     */
    public function setContent($content)
    {
        $this->container['content'] = $content;

        return $this;
    }

    /**
     * Gets execution_point
     * @return string
     */
    public function getExecutionPoint()
    {
        return $this->container['execution_point'];
    }

    /**
     * Sets execution_point
     * @param string $execution_point
     * @return $this
     */
    public function setExecutionPoint($execution_point)
    {
        $allowed_values = $this->getExecutionPointAllowableValues();
        if (!is_null($execution_point) && !in_array($execution_point, $allowed_values)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'execution_point', must be one of '%s'",
                    implode("', '", $allowed_values)
                )
            );
        }
        $this->container['execution_point'] = $execution_point;

        return $this;
    }

    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets id_temp
     * @return int
     */
    public function getIdTemp()
    {
        return $this->container['id_temp'];
    }

    /**
     * Sets id_temp
     * @param int $id_temp
     * @return $this
     */
    public function setIdTemp($id_temp)
    {
        $this->container['id_temp'] = $id_temp;

        return $this;
    }

    /**
     * Gets operation
     * @return \Swagger\Client\Model\APIComponentSimpleBean
     */
    public function getOperation()
    {
        return $this->container['operation'];
    }

    /**
     * Sets operation
     * @param \Swagger\Client\Model\APIComponentSimpleBean $operation
     * @return $this
     */
    public function setOperation($operation)
    {
        $this->container['operation'] = $operation;

        return $this;
    }

    /**
     * Gets parent
     * @return \Swagger\Client\Model\InterceptorReferenceBean
     */
    public function getParent()
    {
        return $this->container['parent'];
    }

    /**
     * Sets parent
     * @param \Swagger\Client\Model\InterceptorReferenceBean $parent
     * @return $this
     */
    public function setParent($parent)
    {
        $this->container['parent'] = $parent;

        return $this;
    }

    /**
     * Gets parent_type
     * @return string
     */
    public function getParentType()
    {
        return $this->container['parent_type'];
    }

    /**
     * Sets parent_type
     * @param string $parent_type
     * @return $this
     */
    public function setParentType($parent_type)
    {
        $allowed_values = $this->getParentTypeAllowableValues();
        if (!is_null($parent_type) && !in_array($parent_type, $allowed_values)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'parent_type', must be one of '%s'",
                    implode("', '", $allowed_values)
                )
            );
        }
        $this->container['parent_type'] = $parent_type;

        return $this;
    }

    /**
     * Gets plan_id
     * @return int
     */
    public function getPlanId()
    {
        return $this->container['plan_id'];
    }

    /**
     * Sets plan_id
     * @param int $plan_id
     * @return $this
     */
    public function setPlanId($plan_id)
    {
        $this->container['plan_id'] = $plan_id;

        return $this;
    }

    /**
     * Gets position
     * @return int
     */
    public function getPosition()
    {
        return $this->container['position'];
    }

    /**
     * Sets position
     * @param int $position
     * @return $this
     */
    public function setPosition($position)
    {
        $this->container['position'] = $position;

        return $this;
    }

    /**
     * Gets resource
     * @return \Swagger\Client\Model\APIComponentSimpleBean
     */
    public function getResource()
    {
        return $this->container['resource'];
    }

    /**
     * Sets resource
     * @param \Swagger\Client\Model\APIComponentSimpleBean $resource
     * @return $this
     */
    public function setResource($resource)
    {
        $this->container['resource'] = $resource;

        return $this;
    }

    /**
     * Gets revision
     * @return \Swagger\Client\Model\APIComponentSimpleBean
     */
    public function getRevision()
    {
        return $this->container['revision'];
    }

    /**
     * Sets revision
     * @param \Swagger\Client\Model\APIComponentSimpleBean $revision
     * @return $this
     */
    public function setRevision($revision)
    {
        $this->container['revision'] = $revision;

        return $this;
    }

    /**
     * Gets status
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     * @param string $status
     * @return $this
     */
    public function setStatus($status)
    {
        $allowed_values = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowed_values)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'status', must be one of '%s'",
                    implode("', '", $allowed_values)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets type
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     * @param string $type
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


