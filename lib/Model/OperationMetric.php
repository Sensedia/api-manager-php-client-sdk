<?php
/**
 * OperationMetric
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * API Manager Portal
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * OperationMetric Class Doc Comment
 *
 * @category    Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class OperationMetric implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'OperationMetric';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'avg_latency' => 'double',
        'cache_count' => 'int',
        'count' => 'int',
        'date' => '\DateTime',
        'hits_with_cache' => 'int',
        'hits_without_cache' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'avg_latency' => 'double',
        'cache_count' => 'int64',
        'count' => 'int64',
        'date' => 'date-time',
        'hits_with_cache' => 'int64',
        'hits_without_cache' => 'int64'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'avg_latency' => 'avgLatency',
        'cache_count' => 'cacheCount',
        'count' => 'count',
        'date' => 'date',
        'hits_with_cache' => 'hitsWithCache',
        'hits_without_cache' => 'hitsWithoutCache'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'avg_latency' => 'setAvgLatency',
        'cache_count' => 'setCacheCount',
        'count' => 'setCount',
        'date' => 'setDate',
        'hits_with_cache' => 'setHitsWithCache',
        'hits_without_cache' => 'setHitsWithoutCache'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'avg_latency' => 'getAvgLatency',
        'cache_count' => 'getCacheCount',
        'count' => 'getCount',
        'date' => 'getDate',
        'hits_with_cache' => 'getHitsWithCache',
        'hits_without_cache' => 'getHitsWithoutCache'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['avg_latency'] = isset($data['avg_latency']) ? $data['avg_latency'] : null;
        $this->container['cache_count'] = isset($data['cache_count']) ? $data['cache_count'] : null;
        $this->container['count'] = isset($data['count']) ? $data['count'] : null;
        $this->container['date'] = isset($data['date']) ? $data['date'] : null;
        $this->container['hits_with_cache'] = isset($data['hits_with_cache']) ? $data['hits_with_cache'] : null;
        $this->container['hits_without_cache'] = isset($data['hits_without_cache']) ? $data['hits_without_cache'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets avg_latency
     * @return double
     */
    public function getAvgLatency()
    {
        return $this->container['avg_latency'];
    }

    /**
     * Sets avg_latency
     * @param double $avg_latency
     * @return $this
     */
    public function setAvgLatency($avg_latency)
    {
        $this->container['avg_latency'] = $avg_latency;

        return $this;
    }

    /**
     * Gets cache_count
     * @return int
     */
    public function getCacheCount()
    {
        return $this->container['cache_count'];
    }

    /**
     * Sets cache_count
     * @param int $cache_count
     * @return $this
     */
    public function setCacheCount($cache_count)
    {
        $this->container['cache_count'] = $cache_count;

        return $this;
    }

    /**
     * Gets count
     * @return int
     */
    public function getCount()
    {
        return $this->container['count'];
    }

    /**
     * Sets count
     * @param int $count
     * @return $this
     */
    public function setCount($count)
    {
        $this->container['count'] = $count;

        return $this;
    }

    /**
     * Gets date
     * @return \DateTime
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     * @param \DateTime $date
     * @return $this
     */
    public function setDate($date)
    {
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets hits_with_cache
     * @return int
     */
    public function getHitsWithCache()
    {
        return $this->container['hits_with_cache'];
    }

    /**
     * Sets hits_with_cache
     * @param int $hits_with_cache
     * @return $this
     */
    public function setHitsWithCache($hits_with_cache)
    {
        $this->container['hits_with_cache'] = $hits_with_cache;

        return $this;
    }

    /**
     * Gets hits_without_cache
     * @return int
     */
    public function getHitsWithoutCache()
    {
        return $this->container['hits_without_cache'];
    }

    /**
     * Sets hits_without_cache
     * @param int $hits_without_cache
     * @return $this
     */
    public function setHitsWithoutCache($hits_without_cache)
    {
        $this->container['hits_without_cache'] = $hits_without_cache;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


