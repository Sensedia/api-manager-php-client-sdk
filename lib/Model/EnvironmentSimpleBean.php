<?php
/**
 * EnvironmentSimpleBean
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * API Manager Portal
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * EnvironmentSimpleBean Class Doc Comment
 *
 * @category    Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class EnvironmentSimpleBean implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'EnvironmentSimpleBean';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'inbound_url' => 'string',
        'name' => 'string',
        'owner' => '\Swagger\Client\Model\UserBean',
        'revision_deployed' => '\Swagger\Client\Model\DeploymentSimpleBean',
        'team_visibility' => '\Swagger\Client\Model\TeamBean',
        'users' => '\Swagger\Client\Model\EvironmentUserBean[]',
        'visibility_type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int64',
        'inbound_url' => null,
        'name' => null,
        'owner' => null,
        'revision_deployed' => null,
        'team_visibility' => null,
        'users' => null,
        'visibility_type' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'inbound_url' => 'inboundUrl',
        'name' => 'name',
        'owner' => 'owner',
        'revision_deployed' => 'revisionDeployed',
        'team_visibility' => 'teamVisibility',
        'users' => 'users',
        'visibility_type' => 'visibilityType'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'inbound_url' => 'setInboundUrl',
        'name' => 'setName',
        'owner' => 'setOwner',
        'revision_deployed' => 'setRevisionDeployed',
        'team_visibility' => 'setTeamVisibility',
        'users' => 'setUsers',
        'visibility_type' => 'setVisibilityType'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'inbound_url' => 'getInboundUrl',
        'name' => 'getName',
        'owner' => 'getOwner',
        'revision_deployed' => 'getRevisionDeployed',
        'team_visibility' => 'getTeamVisibility',
        'users' => 'getUsers',
        'visibility_type' => 'getVisibilityType'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const VISIBILITY_TYPE_ORGANIZATION = 'ORGANIZATION';
    const VISIBILITY_TYPE_TEAM = 'TEAM';
    const VISIBILITY_TYPE_ME = 'ME';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getVisibilityTypeAllowableValues()
    {
        return [
            self::VISIBILITY_TYPE_ORGANIZATION,
            self::VISIBILITY_TYPE_TEAM,
            self::VISIBILITY_TYPE_ME,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['inbound_url'] = isset($data['inbound_url']) ? $data['inbound_url'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['owner'] = isset($data['owner']) ? $data['owner'] : null;
        $this->container['revision_deployed'] = isset($data['revision_deployed']) ? $data['revision_deployed'] : null;
        $this->container['team_visibility'] = isset($data['team_visibility']) ? $data['team_visibility'] : null;
        $this->container['users'] = isset($data['users']) ? $data['users'] : null;
        $this->container['visibility_type'] = isset($data['visibility_type']) ? $data['visibility_type'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        $allowed_values = $this->getVisibilityTypeAllowableValues();
        if (!in_array($this->container['visibility_type'], $allowed_values)) {
            $invalid_properties[] = sprintf(
                "invalid value for 'visibility_type', must be one of '%s'",
                implode("', '", $allowed_values)
            );
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        $allowed_values = $this->getVisibilityTypeAllowableValues();
        if (!in_array($this->container['visibility_type'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets inbound_url
     * @return string
     */
    public function getInboundUrl()
    {
        return $this->container['inbound_url'];
    }

    /**
     * Sets inbound_url
     * @param string $inbound_url
     * @return $this
     */
    public function setInboundUrl($inbound_url)
    {
        $this->container['inbound_url'] = $inbound_url;

        return $this;
    }

    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     * @param string $name
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets owner
     * @return \Swagger\Client\Model\UserBean
     */
    public function getOwner()
    {
        return $this->container['owner'];
    }

    /**
     * Sets owner
     * @param \Swagger\Client\Model\UserBean $owner
     * @return $this
     */
    public function setOwner($owner)
    {
        $this->container['owner'] = $owner;

        return $this;
    }

    /**
     * Gets revision_deployed
     * @return \Swagger\Client\Model\DeploymentSimpleBean
     */
    public function getRevisionDeployed()
    {
        return $this->container['revision_deployed'];
    }

    /**
     * Sets revision_deployed
     * @param \Swagger\Client\Model\DeploymentSimpleBean $revision_deployed
     * @return $this
     */
    public function setRevisionDeployed($revision_deployed)
    {
        $this->container['revision_deployed'] = $revision_deployed;

        return $this;
    }

    /**
     * Gets team_visibility
     * @return \Swagger\Client\Model\TeamBean
     */
    public function getTeamVisibility()
    {
        return $this->container['team_visibility'];
    }

    /**
     * Sets team_visibility
     * @param \Swagger\Client\Model\TeamBean $team_visibility
     * @return $this
     */
    public function setTeamVisibility($team_visibility)
    {
        $this->container['team_visibility'] = $team_visibility;

        return $this;
    }

    /**
     * Gets users
     * @return \Swagger\Client\Model\EvironmentUserBean[]
     */
    public function getUsers()
    {
        return $this->container['users'];
    }

    /**
     * Sets users
     * @param \Swagger\Client\Model\EvironmentUserBean[] $users
     * @return $this
     */
    public function setUsers($users)
    {
        $this->container['users'] = $users;

        return $this;
    }

    /**
     * Gets visibility_type
     * @return string
     */
    public function getVisibilityType()
    {
        return $this->container['visibility_type'];
    }

    /**
     * Sets visibility_type
     * @param string $visibility_type
     * @return $this
     */
    public function setVisibilityType($visibility_type)
    {
        $allowed_values = $this->getVisibilityTypeAllowableValues();
        if (!is_null($visibility_type) && !in_array($visibility_type, $allowed_values)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'visibility_type', must be one of '%s'",
                    implode("', '", $allowed_values)
                )
            );
        }
        $this->container['visibility_type'] = $visibility_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


