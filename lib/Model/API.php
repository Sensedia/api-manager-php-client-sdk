<?php
/**
 * API
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * API Manager Portal
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * API Class Doc Comment
 *
 * @category    Class
 * @description API Model
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class API implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'API';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'access_token_expires_in' => 'int',
        'apps_count' => 'int',
        'base_path' => 'string',
        'creation_date' => '\DateTime',
        'description' => 'string',
        'environments' => '\Swagger\Client\Model\EnvironmentSimpleBean[]',
        'icon' => 'string',
        'id' => 'int',
        'last_revision' => '\Swagger\Client\Model\RevisionSimpleBean',
        'last_version' => 'bool',
        'name' => 'string',
        'owner' => '\Swagger\Client\Model\UserBean',
        'parent_id' => 'int',
        'plans' => '\Swagger\Client\Model\PlanSimpleBean[]',
        'private_api' => 'bool',
        'release_notes' => 'string',
        'revisions' => '\Swagger\Client\Model\RevisionSimpleBean[]',
        'team_visibility' => '\Swagger\Client\Model\TeamBean',
        'users' => '\Swagger\Client\Model\APIUserBean[]',
        'version' => 'string',
        'visibility_type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'access_token_expires_in' => 'int64',
        'apps_count' => 'int64',
        'base_path' => null,
        'creation_date' => 'date-time',
        'description' => null,
        'environments' => null,
        'icon' => null,
        'id' => 'int64',
        'last_revision' => null,
        'last_version' => null,
        'name' => null,
        'owner' => null,
        'parent_id' => 'int64',
        'plans' => null,
        'private_api' => null,
        'release_notes' => null,
        'revisions' => null,
        'team_visibility' => null,
        'users' => null,
        'version' => null,
        'visibility_type' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'access_token_expires_in' => 'accessTokenExpiresIn',
        'apps_count' => 'appsCount',
        'base_path' => 'basePath',
        'creation_date' => 'creationDate',
        'description' => 'description',
        'environments' => 'environments',
        'icon' => 'icon',
        'id' => 'id',
        'last_revision' => 'lastRevision',
        'last_version' => 'lastVersion',
        'name' => 'name',
        'owner' => 'owner',
        'parent_id' => 'parentId',
        'plans' => 'plans',
        'private_api' => 'privateAPI',
        'release_notes' => 'releaseNotes',
        'revisions' => 'revisions',
        'team_visibility' => 'teamVisibility',
        'users' => 'users',
        'version' => 'version',
        'visibility_type' => 'visibilityType'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'access_token_expires_in' => 'setAccessTokenExpiresIn',
        'apps_count' => 'setAppsCount',
        'base_path' => 'setBasePath',
        'creation_date' => 'setCreationDate',
        'description' => 'setDescription',
        'environments' => 'setEnvironments',
        'icon' => 'setIcon',
        'id' => 'setId',
        'last_revision' => 'setLastRevision',
        'last_version' => 'setLastVersion',
        'name' => 'setName',
        'owner' => 'setOwner',
        'parent_id' => 'setParentId',
        'plans' => 'setPlans',
        'private_api' => 'setPrivateApi',
        'release_notes' => 'setReleaseNotes',
        'revisions' => 'setRevisions',
        'team_visibility' => 'setTeamVisibility',
        'users' => 'setUsers',
        'version' => 'setVersion',
        'visibility_type' => 'setVisibilityType'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'access_token_expires_in' => 'getAccessTokenExpiresIn',
        'apps_count' => 'getAppsCount',
        'base_path' => 'getBasePath',
        'creation_date' => 'getCreationDate',
        'description' => 'getDescription',
        'environments' => 'getEnvironments',
        'icon' => 'getIcon',
        'id' => 'getId',
        'last_revision' => 'getLastRevision',
        'last_version' => 'getLastVersion',
        'name' => 'getName',
        'owner' => 'getOwner',
        'parent_id' => 'getParentId',
        'plans' => 'getPlans',
        'private_api' => 'getPrivateApi',
        'release_notes' => 'getReleaseNotes',
        'revisions' => 'getRevisions',
        'team_visibility' => 'getTeamVisibility',
        'users' => 'getUsers',
        'version' => 'getVersion',
        'visibility_type' => 'getVisibilityType'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const VISIBILITY_TYPE_ORGANIZATION = 'ORGANIZATION';
    const VISIBILITY_TYPE_TEAM = 'TEAM';
    const VISIBILITY_TYPE_ME = 'ME';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getVisibilityTypeAllowableValues()
    {
        return [
            self::VISIBILITY_TYPE_ORGANIZATION,
            self::VISIBILITY_TYPE_TEAM,
            self::VISIBILITY_TYPE_ME,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['access_token_expires_in'] = isset($data['access_token_expires_in']) ? $data['access_token_expires_in'] : null;
        $this->container['apps_count'] = isset($data['apps_count']) ? $data['apps_count'] : null;
        $this->container['base_path'] = isset($data['base_path']) ? $data['base_path'] : null;
        $this->container['creation_date'] = isset($data['creation_date']) ? $data['creation_date'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['environments'] = isset($data['environments']) ? $data['environments'] : null;
        $this->container['icon'] = isset($data['icon']) ? $data['icon'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['last_revision'] = isset($data['last_revision']) ? $data['last_revision'] : null;
        $this->container['last_version'] = isset($data['last_version']) ? $data['last_version'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['owner'] = isset($data['owner']) ? $data['owner'] : null;
        $this->container['parent_id'] = isset($data['parent_id']) ? $data['parent_id'] : null;
        $this->container['plans'] = isset($data['plans']) ? $data['plans'] : null;
        $this->container['private_api'] = isset($data['private_api']) ? $data['private_api'] : null;
        $this->container['release_notes'] = isset($data['release_notes']) ? $data['release_notes'] : null;
        $this->container['revisions'] = isset($data['revisions']) ? $data['revisions'] : null;
        $this->container['team_visibility'] = isset($data['team_visibility']) ? $data['team_visibility'] : null;
        $this->container['users'] = isset($data['users']) ? $data['users'] : null;
        $this->container['version'] = isset($data['version']) ? $data['version'] : null;
        $this->container['visibility_type'] = isset($data['visibility_type']) ? $data['visibility_type'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        $allowed_values = $this->getVisibilityTypeAllowableValues();
        if (!in_array($this->container['visibility_type'], $allowed_values)) {
            $invalid_properties[] = sprintf(
                "invalid value for 'visibility_type', must be one of '%s'",
                implode("', '", $allowed_values)
            );
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        $allowed_values = $this->getVisibilityTypeAllowableValues();
        if (!in_array($this->container['visibility_type'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets access_token_expires_in
     * @return int
     */
    public function getAccessTokenExpiresIn()
    {
        return $this->container['access_token_expires_in'];
    }

    /**
     * Sets access_token_expires_in
     * @param int $access_token_expires_in
     * @return $this
     */
    public function setAccessTokenExpiresIn($access_token_expires_in)
    {
        $this->container['access_token_expires_in'] = $access_token_expires_in;

        return $this;
    }

    /**
     * Gets apps_count
     * @return int
     */
    public function getAppsCount()
    {
        return $this->container['apps_count'];
    }

    /**
     * Sets apps_count
     * @param int $apps_count
     * @return $this
     */
    public function setAppsCount($apps_count)
    {
        $this->container['apps_count'] = $apps_count;

        return $this;
    }

    /**
     * Gets base_path
     * @return string
     */
    public function getBasePath()
    {
        return $this->container['base_path'];
    }

    /**
     * Sets base_path
     * @param string $base_path
     * @return $this
     */
    public function setBasePath($base_path)
    {
        $this->container['base_path'] = $base_path;

        return $this;
    }

    /**
     * Gets creation_date
     * @return \DateTime
     */
    public function getCreationDate()
    {
        return $this->container['creation_date'];
    }

    /**
     * Sets creation_date
     * @param \DateTime $creation_date
     * @return $this
     */
    public function setCreationDate($creation_date)
    {
        $this->container['creation_date'] = $creation_date;

        return $this;
    }

    /**
     * Gets description
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     * @param string $description
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets environments
     * @return \Swagger\Client\Model\EnvironmentSimpleBean[]
     */
    public function getEnvironments()
    {
        return $this->container['environments'];
    }

    /**
     * Sets environments
     * @param \Swagger\Client\Model\EnvironmentSimpleBean[] $environments
     * @return $this
     */
    public function setEnvironments($environments)
    {
        $this->container['environments'] = $environments;

        return $this;
    }

    /**
     * Gets icon
     * @return string
     */
    public function getIcon()
    {
        return $this->container['icon'];
    }

    /**
     * Sets icon
     * @param string $icon
     * @return $this
     */
    public function setIcon($icon)
    {
        $this->container['icon'] = $icon;

        return $this;
    }

    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets last_revision
     * @return \Swagger\Client\Model\RevisionSimpleBean
     */
    public function getLastRevision()
    {
        return $this->container['last_revision'];
    }

    /**
     * Sets last_revision
     * @param \Swagger\Client\Model\RevisionSimpleBean $last_revision
     * @return $this
     */
    public function setLastRevision($last_revision)
    {
        $this->container['last_revision'] = $last_revision;

        return $this;
    }

    /**
     * Gets last_version
     * @return bool
     */
    public function getLastVersion()
    {
        return $this->container['last_version'];
    }

    /**
     * Sets last_version
     * @param bool $last_version
     * @return $this
     */
    public function setLastVersion($last_version)
    {
        $this->container['last_version'] = $last_version;

        return $this;
    }

    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     * @param string $name
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets owner
     * @return \Swagger\Client\Model\UserBean
     */
    public function getOwner()
    {
        return $this->container['owner'];
    }

    /**
     * Sets owner
     * @param \Swagger\Client\Model\UserBean $owner
     * @return $this
     */
    public function setOwner($owner)
    {
        $this->container['owner'] = $owner;

        return $this;
    }

    /**
     * Gets parent_id
     * @return int
     */
    public function getParentId()
    {
        return $this->container['parent_id'];
    }

    /**
     * Sets parent_id
     * @param int $parent_id
     * @return $this
     */
    public function setParentId($parent_id)
    {
        $this->container['parent_id'] = $parent_id;

        return $this;
    }

    /**
     * Gets plans
     * @return \Swagger\Client\Model\PlanSimpleBean[]
     */
    public function getPlans()
    {
        return $this->container['plans'];
    }

    /**
     * Sets plans
     * @param \Swagger\Client\Model\PlanSimpleBean[] $plans
     * @return $this
     */
    public function setPlans($plans)
    {
        $this->container['plans'] = $plans;

        return $this;
    }

    /**
     * Gets private_api
     * @return bool
     */
    public function getPrivateApi()
    {
        return $this->container['private_api'];
    }

    /**
     * Sets private_api
     * @param bool $private_api
     * @return $this
     */
    public function setPrivateApi($private_api)
    {
        $this->container['private_api'] = $private_api;

        return $this;
    }

    /**
     * Gets release_notes
     * @return string
     */
    public function getReleaseNotes()
    {
        return $this->container['release_notes'];
    }

    /**
     * Sets release_notes
     * @param string $release_notes
     * @return $this
     */
    public function setReleaseNotes($release_notes)
    {
        $this->container['release_notes'] = $release_notes;

        return $this;
    }

    /**
     * Gets revisions
     * @return \Swagger\Client\Model\RevisionSimpleBean[]
     */
    public function getRevisions()
    {
        return $this->container['revisions'];
    }

    /**
     * Sets revisions
     * @param \Swagger\Client\Model\RevisionSimpleBean[] $revisions
     * @return $this
     */
    public function setRevisions($revisions)
    {
        $this->container['revisions'] = $revisions;

        return $this;
    }

    /**
     * Gets team_visibility
     * @return \Swagger\Client\Model\TeamBean
     */
    public function getTeamVisibility()
    {
        return $this->container['team_visibility'];
    }

    /**
     * Sets team_visibility
     * @param \Swagger\Client\Model\TeamBean $team_visibility
     * @return $this
     */
    public function setTeamVisibility($team_visibility)
    {
        $this->container['team_visibility'] = $team_visibility;

        return $this;
    }

    /**
     * Gets users
     * @return \Swagger\Client\Model\APIUserBean[]
     */
    public function getUsers()
    {
        return $this->container['users'];
    }

    /**
     * Sets users
     * @param \Swagger\Client\Model\APIUserBean[] $users
     * @return $this
     */
    public function setUsers($users)
    {
        $this->container['users'] = $users;

        return $this;
    }

    /**
     * Gets version
     * @return string
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     * @param string $version
     * @return $this
     */
    public function setVersion($version)
    {
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets visibility_type
     * @return string
     */
    public function getVisibilityType()
    {
        return $this->container['visibility_type'];
    }

    /**
     * Sets visibility_type
     * @param string $visibility_type
     * @return $this
     */
    public function setVisibilityType($visibility_type)
    {
        $allowed_values = $this->getVisibilityTypeAllowableValues();
        if (!is_null($visibility_type) && !in_array($visibility_type, $allowed_values)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'visibility_type', must be one of '%s'",
                    implode("', '", $allowed_values)
                )
            );
        }
        $this->container['visibility_type'] = $visibility_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


