<?php
/**
 * Call
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * API Manager Portal
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * Call Class Doc Comment
 *
 * @category    Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Call implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Call';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'access_token' => 'string',
        'access_token_owner' => 'string',
        'additional_data' => 'string',
        'api_component_type' => 'string',
        'api_id' => 'int',
        'api_name' => 'string',
        'app_developer' => 'string',
        'app_name' => 'string',
        'app_token' => 'string',
        'auth_owner' => 'string',
        'base_url' => 'string',
        'billing' => 'bool',
        'cache' => 'bool',
        'call_date' => '\DateTime',
        'caller_address' => 'string',
        'client_id' => 'string',
        'complete_url' => 'string',
        'duration' => 'int',
        'duration_millis' => 'int',
        'environment_id' => 'int',
        'environment_name' => 'string',
        'gateway_duration_millis' => 'int',
        'http_status' => 'string',
        'id' => 'string',
        'inserted_on_date' => 'string',
        'method' => 'string',
        'operation_id' => 'int',
        'operation_name' => 'string',
        'received_from_address' => 'string',
        'received_on' => 'int',
        'received_on_date' => 'string',
        'redis' => 'bool',
        'request_headers' => 'string',
        'request_id' => 'string',
        'request_payload' => 'int',
        'resource_id' => 'int',
        'resource_name' => 'string',
        'response_headers' => 'string',
        'response_payload' => 'int',
        'result_status' => 'int',
        'revision_id' => 'int',
        'trace' => 'string',
        'transaction_id' => 'string',
        'type_error' => 'string',
        'type_status' => 'string',
        'uri' => 'string',
        'url' => 'string',
        'year_month' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'access_token' => null,
        'access_token_owner' => null,
        'additional_data' => null,
        'api_component_type' => null,
        'api_id' => 'int64',
        'api_name' => null,
        'app_developer' => null,
        'app_name' => null,
        'app_token' => null,
        'auth_owner' => null,
        'base_url' => null,
        'billing' => null,
        'cache' => null,
        'call_date' => 'date-time',
        'caller_address' => null,
        'client_id' => null,
        'complete_url' => null,
        'duration' => 'int32',
        'duration_millis' => 'int64',
        'environment_id' => 'int64',
        'environment_name' => null,
        'gateway_duration_millis' => 'int64',
        'http_status' => null,
        'id' => null,
        'inserted_on_date' => null,
        'method' => null,
        'operation_id' => 'int64',
        'operation_name' => null,
        'received_from_address' => null,
        'received_on' => 'int64',
        'received_on_date' => null,
        'redis' => null,
        'request_headers' => null,
        'request_id' => null,
        'request_payload' => 'int64',
        'resource_id' => 'int64',
        'resource_name' => null,
        'response_headers' => null,
        'response_payload' => 'int64',
        'result_status' => 'int32',
        'revision_id' => 'int64',
        'trace' => null,
        'transaction_id' => null,
        'type_error' => null,
        'type_status' => null,
        'uri' => null,
        'url' => null,
        'year_month' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'access_token' => 'accessToken',
        'access_token_owner' => 'accessTokenOwner',
        'additional_data' => 'additionalData',
        'api_component_type' => 'apiComponentType',
        'api_id' => 'apiId',
        'api_name' => 'apiName',
        'app_developer' => 'appDeveloper',
        'app_name' => 'appName',
        'app_token' => 'appToken',
        'auth_owner' => 'authOwner',
        'base_url' => 'baseUrl',
        'billing' => 'billing',
        'cache' => 'cache',
        'call_date' => 'callDate',
        'caller_address' => 'callerAddress',
        'client_id' => 'clientId',
        'complete_url' => 'completeUrl',
        'duration' => 'duration',
        'duration_millis' => 'durationMillis',
        'environment_id' => 'environmentId',
        'environment_name' => 'environmentName',
        'gateway_duration_millis' => 'gatewayDurationMillis',
        'http_status' => 'httpStatus',
        'id' => 'id',
        'inserted_on_date' => 'insertedOnDate',
        'method' => 'method',
        'operation_id' => 'operationId',
        'operation_name' => 'operationName',
        'received_from_address' => 'receivedFromAddress',
        'received_on' => 'receivedOn',
        'received_on_date' => 'receivedOnDate',
        'redis' => 'redis',
        'request_headers' => 'requestHeaders',
        'request_id' => 'requestID',
        'request_payload' => 'requestPayload',
        'resource_id' => 'resourceId',
        'resource_name' => 'resourceName',
        'response_headers' => 'responseHeaders',
        'response_payload' => 'responsePayload',
        'result_status' => 'resultStatus',
        'revision_id' => 'revisionId',
        'trace' => 'trace',
        'transaction_id' => 'transactionID',
        'type_error' => 'typeError',
        'type_status' => 'typeStatus',
        'uri' => 'uri',
        'url' => 'url',
        'year_month' => 'yearMonth'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'access_token' => 'setAccessToken',
        'access_token_owner' => 'setAccessTokenOwner',
        'additional_data' => 'setAdditionalData',
        'api_component_type' => 'setApiComponentType',
        'api_id' => 'setApiId',
        'api_name' => 'setApiName',
        'app_developer' => 'setAppDeveloper',
        'app_name' => 'setAppName',
        'app_token' => 'setAppToken',
        'auth_owner' => 'setAuthOwner',
        'base_url' => 'setBaseUrl',
        'billing' => 'setBilling',
        'cache' => 'setCache',
        'call_date' => 'setCallDate',
        'caller_address' => 'setCallerAddress',
        'client_id' => 'setClientId',
        'complete_url' => 'setCompleteUrl',
        'duration' => 'setDuration',
        'duration_millis' => 'setDurationMillis',
        'environment_id' => 'setEnvironmentId',
        'environment_name' => 'setEnvironmentName',
        'gateway_duration_millis' => 'setGatewayDurationMillis',
        'http_status' => 'setHttpStatus',
        'id' => 'setId',
        'inserted_on_date' => 'setInsertedOnDate',
        'method' => 'setMethod',
        'operation_id' => 'setOperationId',
        'operation_name' => 'setOperationName',
        'received_from_address' => 'setReceivedFromAddress',
        'received_on' => 'setReceivedOn',
        'received_on_date' => 'setReceivedOnDate',
        'redis' => 'setRedis',
        'request_headers' => 'setRequestHeaders',
        'request_id' => 'setRequestId',
        'request_payload' => 'setRequestPayload',
        'resource_id' => 'setResourceId',
        'resource_name' => 'setResourceName',
        'response_headers' => 'setResponseHeaders',
        'response_payload' => 'setResponsePayload',
        'result_status' => 'setResultStatus',
        'revision_id' => 'setRevisionId',
        'trace' => 'setTrace',
        'transaction_id' => 'setTransactionId',
        'type_error' => 'setTypeError',
        'type_status' => 'setTypeStatus',
        'uri' => 'setUri',
        'url' => 'setUrl',
        'year_month' => 'setYearMonth'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'access_token' => 'getAccessToken',
        'access_token_owner' => 'getAccessTokenOwner',
        'additional_data' => 'getAdditionalData',
        'api_component_type' => 'getApiComponentType',
        'api_id' => 'getApiId',
        'api_name' => 'getApiName',
        'app_developer' => 'getAppDeveloper',
        'app_name' => 'getAppName',
        'app_token' => 'getAppToken',
        'auth_owner' => 'getAuthOwner',
        'base_url' => 'getBaseUrl',
        'billing' => 'getBilling',
        'cache' => 'getCache',
        'call_date' => 'getCallDate',
        'caller_address' => 'getCallerAddress',
        'client_id' => 'getClientId',
        'complete_url' => 'getCompleteUrl',
        'duration' => 'getDuration',
        'duration_millis' => 'getDurationMillis',
        'environment_id' => 'getEnvironmentId',
        'environment_name' => 'getEnvironmentName',
        'gateway_duration_millis' => 'getGatewayDurationMillis',
        'http_status' => 'getHttpStatus',
        'id' => 'getId',
        'inserted_on_date' => 'getInsertedOnDate',
        'method' => 'getMethod',
        'operation_id' => 'getOperationId',
        'operation_name' => 'getOperationName',
        'received_from_address' => 'getReceivedFromAddress',
        'received_on' => 'getReceivedOn',
        'received_on_date' => 'getReceivedOnDate',
        'redis' => 'getRedis',
        'request_headers' => 'getRequestHeaders',
        'request_id' => 'getRequestId',
        'request_payload' => 'getRequestPayload',
        'resource_id' => 'getResourceId',
        'resource_name' => 'getResourceName',
        'response_headers' => 'getResponseHeaders',
        'response_payload' => 'getResponsePayload',
        'result_status' => 'getResultStatus',
        'revision_id' => 'getRevisionId',
        'trace' => 'getTrace',
        'transaction_id' => 'getTransactionId',
        'type_error' => 'getTypeError',
        'type_status' => 'getTypeStatus',
        'uri' => 'getUri',
        'url' => 'getUrl',
        'year_month' => 'getYearMonth'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const TYPE_ERROR_CLIENT = 'client';
    const TYPE_ERROR_SERVER = 'server';
    const TYPE_ERROR_BLOCKED = 'blocked';
    const TYPE_STATUS_SUCCESS = 'success';
    const TYPE_STATUS_ERROR = 'error';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getTypeErrorAllowableValues()
    {
        return [
            self::TYPE_ERROR_CLIENT,
            self::TYPE_ERROR_SERVER,
            self::TYPE_ERROR_BLOCKED,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getTypeStatusAllowableValues()
    {
        return [
            self::TYPE_STATUS_SUCCESS,
            self::TYPE_STATUS_ERROR,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['access_token'] = isset($data['access_token']) ? $data['access_token'] : null;
        $this->container['access_token_owner'] = isset($data['access_token_owner']) ? $data['access_token_owner'] : null;
        $this->container['additional_data'] = isset($data['additional_data']) ? $data['additional_data'] : null;
        $this->container['api_component_type'] = isset($data['api_component_type']) ? $data['api_component_type'] : null;
        $this->container['api_id'] = isset($data['api_id']) ? $data['api_id'] : null;
        $this->container['api_name'] = isset($data['api_name']) ? $data['api_name'] : null;
        $this->container['app_developer'] = isset($data['app_developer']) ? $data['app_developer'] : null;
        $this->container['app_name'] = isset($data['app_name']) ? $data['app_name'] : null;
        $this->container['app_token'] = isset($data['app_token']) ? $data['app_token'] : null;
        $this->container['auth_owner'] = isset($data['auth_owner']) ? $data['auth_owner'] : null;
        $this->container['base_url'] = isset($data['base_url']) ? $data['base_url'] : null;
        $this->container['billing'] = isset($data['billing']) ? $data['billing'] : null;
        $this->container['cache'] = isset($data['cache']) ? $data['cache'] : null;
        $this->container['call_date'] = isset($data['call_date']) ? $data['call_date'] : null;
        $this->container['caller_address'] = isset($data['caller_address']) ? $data['caller_address'] : null;
        $this->container['client_id'] = isset($data['client_id']) ? $data['client_id'] : null;
        $this->container['complete_url'] = isset($data['complete_url']) ? $data['complete_url'] : null;
        $this->container['duration'] = isset($data['duration']) ? $data['duration'] : null;
        $this->container['duration_millis'] = isset($data['duration_millis']) ? $data['duration_millis'] : null;
        $this->container['environment_id'] = isset($data['environment_id']) ? $data['environment_id'] : null;
        $this->container['environment_name'] = isset($data['environment_name']) ? $data['environment_name'] : null;
        $this->container['gateway_duration_millis'] = isset($data['gateway_duration_millis']) ? $data['gateway_duration_millis'] : null;
        $this->container['http_status'] = isset($data['http_status']) ? $data['http_status'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['inserted_on_date'] = isset($data['inserted_on_date']) ? $data['inserted_on_date'] : null;
        $this->container['method'] = isset($data['method']) ? $data['method'] : null;
        $this->container['operation_id'] = isset($data['operation_id']) ? $data['operation_id'] : null;
        $this->container['operation_name'] = isset($data['operation_name']) ? $data['operation_name'] : null;
        $this->container['received_from_address'] = isset($data['received_from_address']) ? $data['received_from_address'] : null;
        $this->container['received_on'] = isset($data['received_on']) ? $data['received_on'] : null;
        $this->container['received_on_date'] = isset($data['received_on_date']) ? $data['received_on_date'] : null;
        $this->container['redis'] = isset($data['redis']) ? $data['redis'] : null;
        $this->container['request_headers'] = isset($data['request_headers']) ? $data['request_headers'] : null;
        $this->container['request_id'] = isset($data['request_id']) ? $data['request_id'] : null;
        $this->container['request_payload'] = isset($data['request_payload']) ? $data['request_payload'] : null;
        $this->container['resource_id'] = isset($data['resource_id']) ? $data['resource_id'] : null;
        $this->container['resource_name'] = isset($data['resource_name']) ? $data['resource_name'] : null;
        $this->container['response_headers'] = isset($data['response_headers']) ? $data['response_headers'] : null;
        $this->container['response_payload'] = isset($data['response_payload']) ? $data['response_payload'] : null;
        $this->container['result_status'] = isset($data['result_status']) ? $data['result_status'] : null;
        $this->container['revision_id'] = isset($data['revision_id']) ? $data['revision_id'] : null;
        $this->container['trace'] = isset($data['trace']) ? $data['trace'] : null;
        $this->container['transaction_id'] = isset($data['transaction_id']) ? $data['transaction_id'] : null;
        $this->container['type_error'] = isset($data['type_error']) ? $data['type_error'] : null;
        $this->container['type_status'] = isset($data['type_status']) ? $data['type_status'] : null;
        $this->container['uri'] = isset($data['uri']) ? $data['uri'] : null;
        $this->container['url'] = isset($data['url']) ? $data['url'] : null;
        $this->container['year_month'] = isset($data['year_month']) ? $data['year_month'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        $allowed_values = $this->getTypeErrorAllowableValues();
        if (!in_array($this->container['type_error'], $allowed_values)) {
            $invalid_properties[] = sprintf(
                "invalid value for 'type_error', must be one of '%s'",
                implode("', '", $allowed_values)
            );
        }

        $allowed_values = $this->getTypeStatusAllowableValues();
        if (!in_array($this->container['type_status'], $allowed_values)) {
            $invalid_properties[] = sprintf(
                "invalid value for 'type_status', must be one of '%s'",
                implode("', '", $allowed_values)
            );
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        $allowed_values = $this->getTypeErrorAllowableValues();
        if (!in_array($this->container['type_error'], $allowed_values)) {
            return false;
        }
        $allowed_values = $this->getTypeStatusAllowableValues();
        if (!in_array($this->container['type_status'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets access_token
     * @return string
     */
    public function getAccessToken()
    {
        return $this->container['access_token'];
    }

    /**
     * Sets access_token
     * @param string $access_token
     * @return $this
     */
    public function setAccessToken($access_token)
    {
        $this->container['access_token'] = $access_token;

        return $this;
    }

    /**
     * Gets access_token_owner
     * @return string
     */
    public function getAccessTokenOwner()
    {
        return $this->container['access_token_owner'];
    }

    /**
     * Sets access_token_owner
     * @param string $access_token_owner
     * @return $this
     */
    public function setAccessTokenOwner($access_token_owner)
    {
        $this->container['access_token_owner'] = $access_token_owner;

        return $this;
    }

    /**
     * Gets additional_data
     * @return string
     */
    public function getAdditionalData()
    {
        return $this->container['additional_data'];
    }

    /**
     * Sets additional_data
     * @param string $additional_data
     * @return $this
     */
    public function setAdditionalData($additional_data)
    {
        $this->container['additional_data'] = $additional_data;

        return $this;
    }

    /**
     * Gets api_component_type
     * @return string
     */
    public function getApiComponentType()
    {
        return $this->container['api_component_type'];
    }

    /**
     * Sets api_component_type
     * @param string $api_component_type
     * @return $this
     */
    public function setApiComponentType($api_component_type)
    {
        $this->container['api_component_type'] = $api_component_type;

        return $this;
    }

    /**
     * Gets api_id
     * @return int
     */
    public function getApiId()
    {
        return $this->container['api_id'];
    }

    /**
     * Sets api_id
     * @param int $api_id
     * @return $this
     */
    public function setApiId($api_id)
    {
        $this->container['api_id'] = $api_id;

        return $this;
    }

    /**
     * Gets api_name
     * @return string
     */
    public function getApiName()
    {
        return $this->container['api_name'];
    }

    /**
     * Sets api_name
     * @param string $api_name
     * @return $this
     */
    public function setApiName($api_name)
    {
        $this->container['api_name'] = $api_name;

        return $this;
    }

    /**
     * Gets app_developer
     * @return string
     */
    public function getAppDeveloper()
    {
        return $this->container['app_developer'];
    }

    /**
     * Sets app_developer
     * @param string $app_developer
     * @return $this
     */
    public function setAppDeveloper($app_developer)
    {
        $this->container['app_developer'] = $app_developer;

        return $this;
    }

    /**
     * Gets app_name
     * @return string
     */
    public function getAppName()
    {
        return $this->container['app_name'];
    }

    /**
     * Sets app_name
     * @param string $app_name
     * @return $this
     */
    public function setAppName($app_name)
    {
        $this->container['app_name'] = $app_name;

        return $this;
    }

    /**
     * Gets app_token
     * @return string
     */
    public function getAppToken()
    {
        return $this->container['app_token'];
    }

    /**
     * Sets app_token
     * @param string $app_token
     * @return $this
     */
    public function setAppToken($app_token)
    {
        $this->container['app_token'] = $app_token;

        return $this;
    }

    /**
     * Gets auth_owner
     * @return string
     */
    public function getAuthOwner()
    {
        return $this->container['auth_owner'];
    }

    /**
     * Sets auth_owner
     * @param string $auth_owner
     * @return $this
     */
    public function setAuthOwner($auth_owner)
    {
        $this->container['auth_owner'] = $auth_owner;

        return $this;
    }

    /**
     * Gets base_url
     * @return string
     */
    public function getBaseUrl()
    {
        return $this->container['base_url'];
    }

    /**
     * Sets base_url
     * @param string $base_url
     * @return $this
     */
    public function setBaseUrl($base_url)
    {
        $this->container['base_url'] = $base_url;

        return $this;
    }

    /**
     * Gets billing
     * @return bool
     */
    public function getBilling()
    {
        return $this->container['billing'];
    }

    /**
     * Sets billing
     * @param bool $billing
     * @return $this
     */
    public function setBilling($billing)
    {
        $this->container['billing'] = $billing;

        return $this;
    }

    /**
     * Gets cache
     * @return bool
     */
    public function getCache()
    {
        return $this->container['cache'];
    }

    /**
     * Sets cache
     * @param bool $cache
     * @return $this
     */
    public function setCache($cache)
    {
        $this->container['cache'] = $cache;

        return $this;
    }

    /**
     * Gets call_date
     * @return \DateTime
     */
    public function getCallDate()
    {
        return $this->container['call_date'];
    }

    /**
     * Sets call_date
     * @param \DateTime $call_date
     * @return $this
     */
    public function setCallDate($call_date)
    {
        $this->container['call_date'] = $call_date;

        return $this;
    }

    /**
     * Gets caller_address
     * @return string
     */
    public function getCallerAddress()
    {
        return $this->container['caller_address'];
    }

    /**
     * Sets caller_address
     * @param string $caller_address
     * @return $this
     */
    public function setCallerAddress($caller_address)
    {
        $this->container['caller_address'] = $caller_address;

        return $this;
    }

    /**
     * Gets client_id
     * @return string
     */
    public function getClientId()
    {
        return $this->container['client_id'];
    }

    /**
     * Sets client_id
     * @param string $client_id
     * @return $this
     */
    public function setClientId($client_id)
    {
        $this->container['client_id'] = $client_id;

        return $this;
    }

    /**
     * Gets complete_url
     * @return string
     */
    public function getCompleteUrl()
    {
        return $this->container['complete_url'];
    }

    /**
     * Sets complete_url
     * @param string $complete_url
     * @return $this
     */
    public function setCompleteUrl($complete_url)
    {
        $this->container['complete_url'] = $complete_url;

        return $this;
    }

    /**
     * Gets duration
     * @return int
     */
    public function getDuration()
    {
        return $this->container['duration'];
    }

    /**
     * Sets duration
     * @param int $duration
     * @return $this
     */
    public function setDuration($duration)
    {
        $this->container['duration'] = $duration;

        return $this;
    }

    /**
     * Gets duration_millis
     * @return int
     */
    public function getDurationMillis()
    {
        return $this->container['duration_millis'];
    }

    /**
     * Sets duration_millis
     * @param int $duration_millis
     * @return $this
     */
    public function setDurationMillis($duration_millis)
    {
        $this->container['duration_millis'] = $duration_millis;

        return $this;
    }

    /**
     * Gets environment_id
     * @return int
     */
    public function getEnvironmentId()
    {
        return $this->container['environment_id'];
    }

    /**
     * Sets environment_id
     * @param int $environment_id
     * @return $this
     */
    public function setEnvironmentId($environment_id)
    {
        $this->container['environment_id'] = $environment_id;

        return $this;
    }

    /**
     * Gets environment_name
     * @return string
     */
    public function getEnvironmentName()
    {
        return $this->container['environment_name'];
    }

    /**
     * Sets environment_name
     * @param string $environment_name
     * @return $this
     */
    public function setEnvironmentName($environment_name)
    {
        $this->container['environment_name'] = $environment_name;

        return $this;
    }

    /**
     * Gets gateway_duration_millis
     * @return int
     */
    public function getGatewayDurationMillis()
    {
        return $this->container['gateway_duration_millis'];
    }

    /**
     * Sets gateway_duration_millis
     * @param int $gateway_duration_millis
     * @return $this
     */
    public function setGatewayDurationMillis($gateway_duration_millis)
    {
        $this->container['gateway_duration_millis'] = $gateway_duration_millis;

        return $this;
    }

    /**
     * Gets http_status
     * @return string
     */
    public function getHttpStatus()
    {
        return $this->container['http_status'];
    }

    /**
     * Sets http_status
     * @param string $http_status
     * @return $this
     */
    public function setHttpStatus($http_status)
    {
        $this->container['http_status'] = $http_status;

        return $this;
    }

    /**
     * Gets id
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param string $id
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets inserted_on_date
     * @return string
     */
    public function getInsertedOnDate()
    {
        return $this->container['inserted_on_date'];
    }

    /**
     * Sets inserted_on_date
     * @param string $inserted_on_date
     * @return $this
     */
    public function setInsertedOnDate($inserted_on_date)
    {
        $this->container['inserted_on_date'] = $inserted_on_date;

        return $this;
    }

    /**
     * Gets method
     * @return string
     */
    public function getMethod()
    {
        return $this->container['method'];
    }

    /**
     * Sets method
     * @param string $method
     * @return $this
     */
    public function setMethod($method)
    {
        $this->container['method'] = $method;

        return $this;
    }

    /**
     * Gets operation_id
     * @return int
     */
    public function getOperationId()
    {
        return $this->container['operation_id'];
    }

    /**
     * Sets operation_id
     * @param int $operation_id
     * @return $this
     */
    public function setOperationId($operation_id)
    {
        $this->container['operation_id'] = $operation_id;

        return $this;
    }

    /**
     * Gets operation_name
     * @return string
     */
    public function getOperationName()
    {
        return $this->container['operation_name'];
    }

    /**
     * Sets operation_name
     * @param string $operation_name
     * @return $this
     */
    public function setOperationName($operation_name)
    {
        $this->container['operation_name'] = $operation_name;

        return $this;
    }

    /**
     * Gets received_from_address
     * @return string
     */
    public function getReceivedFromAddress()
    {
        return $this->container['received_from_address'];
    }

    /**
     * Sets received_from_address
     * @param string $received_from_address
     * @return $this
     */
    public function setReceivedFromAddress($received_from_address)
    {
        $this->container['received_from_address'] = $received_from_address;

        return $this;
    }

    /**
     * Gets received_on
     * @return int
     */
    public function getReceivedOn()
    {
        return $this->container['received_on'];
    }

    /**
     * Sets received_on
     * @param int $received_on
     * @return $this
     */
    public function setReceivedOn($received_on)
    {
        $this->container['received_on'] = $received_on;

        return $this;
    }

    /**
     * Gets received_on_date
     * @return string
     */
    public function getReceivedOnDate()
    {
        return $this->container['received_on_date'];
    }

    /**
     * Sets received_on_date
     * @param string $received_on_date
     * @return $this
     */
    public function setReceivedOnDate($received_on_date)
    {
        $this->container['received_on_date'] = $received_on_date;

        return $this;
    }

    /**
     * Gets redis
     * @return bool
     */
    public function getRedis()
    {
        return $this->container['redis'];
    }

    /**
     * Sets redis
     * @param bool $redis
     * @return $this
     */
    public function setRedis($redis)
    {
        $this->container['redis'] = $redis;

        return $this;
    }

    /**
     * Gets request_headers
     * @return string
     */
    public function getRequestHeaders()
    {
        return $this->container['request_headers'];
    }

    /**
     * Sets request_headers
     * @param string $request_headers
     * @return $this
     */
    public function setRequestHeaders($request_headers)
    {
        $this->container['request_headers'] = $request_headers;

        return $this;
    }

    /**
     * Gets request_id
     * @return string
     */
    public function getRequestId()
    {
        return $this->container['request_id'];
    }

    /**
     * Sets request_id
     * @param string $request_id
     * @return $this
     */
    public function setRequestId($request_id)
    {
        $this->container['request_id'] = $request_id;

        return $this;
    }

    /**
     * Gets request_payload
     * @return int
     */
    public function getRequestPayload()
    {
        return $this->container['request_payload'];
    }

    /**
     * Sets request_payload
     * @param int $request_payload
     * @return $this
     */
    public function setRequestPayload($request_payload)
    {
        $this->container['request_payload'] = $request_payload;

        return $this;
    }

    /**
     * Gets resource_id
     * @return int
     */
    public function getResourceId()
    {
        return $this->container['resource_id'];
    }

    /**
     * Sets resource_id
     * @param int $resource_id
     * @return $this
     */
    public function setResourceId($resource_id)
    {
        $this->container['resource_id'] = $resource_id;

        return $this;
    }

    /**
     * Gets resource_name
     * @return string
     */
    public function getResourceName()
    {
        return $this->container['resource_name'];
    }

    /**
     * Sets resource_name
     * @param string $resource_name
     * @return $this
     */
    public function setResourceName($resource_name)
    {
        $this->container['resource_name'] = $resource_name;

        return $this;
    }

    /**
     * Gets response_headers
     * @return string
     */
    public function getResponseHeaders()
    {
        return $this->container['response_headers'];
    }

    /**
     * Sets response_headers
     * @param string $response_headers
     * @return $this
     */
    public function setResponseHeaders($response_headers)
    {
        $this->container['response_headers'] = $response_headers;

        return $this;
    }

    /**
     * Gets response_payload
     * @return int
     */
    public function getResponsePayload()
    {
        return $this->container['response_payload'];
    }

    /**
     * Sets response_payload
     * @param int $response_payload
     * @return $this
     */
    public function setResponsePayload($response_payload)
    {
        $this->container['response_payload'] = $response_payload;

        return $this;
    }

    /**
     * Gets result_status
     * @return int
     */
    public function getResultStatus()
    {
        return $this->container['result_status'];
    }

    /**
     * Sets result_status
     * @param int $result_status
     * @return $this
     */
    public function setResultStatus($result_status)
    {
        $this->container['result_status'] = $result_status;

        return $this;
    }

    /**
     * Gets revision_id
     * @return int
     */
    public function getRevisionId()
    {
        return $this->container['revision_id'];
    }

    /**
     * Sets revision_id
     * @param int $revision_id
     * @return $this
     */
    public function setRevisionId($revision_id)
    {
        $this->container['revision_id'] = $revision_id;

        return $this;
    }

    /**
     * Gets trace
     * @return string
     */
    public function getTrace()
    {
        return $this->container['trace'];
    }

    /**
     * Sets trace
     * @param string $trace
     * @return $this
     */
    public function setTrace($trace)
    {
        $this->container['trace'] = $trace;

        return $this;
    }

    /**
     * Gets transaction_id
     * @return string
     */
    public function getTransactionId()
    {
        return $this->container['transaction_id'];
    }

    /**
     * Sets transaction_id
     * @param string $transaction_id
     * @return $this
     */
    public function setTransactionId($transaction_id)
    {
        $this->container['transaction_id'] = $transaction_id;

        return $this;
    }

    /**
     * Gets type_error
     * @return string
     */
    public function getTypeError()
    {
        return $this->container['type_error'];
    }

    /**
     * Sets type_error
     * @param string $type_error
     * @return $this
     */
    public function setTypeError($type_error)
    {
        $allowed_values = $this->getTypeErrorAllowableValues();
        if (!is_null($type_error) && !in_array($type_error, $allowed_values)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'type_error', must be one of '%s'",
                    implode("', '", $allowed_values)
                )
            );
        }
        $this->container['type_error'] = $type_error;

        return $this;
    }

    /**
     * Gets type_status
     * @return string
     */
    public function getTypeStatus()
    {
        return $this->container['type_status'];
    }

    /**
     * Sets type_status
     * @param string $type_status
     * @return $this
     */
    public function setTypeStatus($type_status)
    {
        $allowed_values = $this->getTypeStatusAllowableValues();
        if (!is_null($type_status) && !in_array($type_status, $allowed_values)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'type_status', must be one of '%s'",
                    implode("', '", $allowed_values)
                )
            );
        }
        $this->container['type_status'] = $type_status;

        return $this;
    }

    /**
     * Gets uri
     * @return string
     */
    public function getUri()
    {
        return $this->container['uri'];
    }

    /**
     * Sets uri
     * @param string $uri
     * @return $this
     */
    public function setUri($uri)
    {
        $this->container['uri'] = $uri;

        return $this;
    }

    /**
     * Gets url
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     * @param string $url
     * @return $this
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets year_month
     * @return string
     */
    public function getYearMonth()
    {
        return $this->container['year_month'];
    }

    /**
     * Sets year_month
     * @param string $year_month
     * @return $this
     */
    public function setYearMonth($year_month)
    {
        $this->container['year_month'] = $year_month;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


