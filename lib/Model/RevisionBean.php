<?php
/**
 * RevisionBean
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * API Manager Portal
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * RevisionBean Class Doc Comment
 *
 * @category    Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class RevisionBean implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'RevisionBean';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'api' => '\Swagger\Client\Model\API',
        'api_broken' => 'bool',
        'creation_date' => '\DateTime',
        'deployments' => '\Swagger\Client\Model\DeploymentBean[]',
        'destination' => 'string',
        'id' => 'int',
        'interceptors' => '\Swagger\Client\Model\InterceptorBean[]',
        'life_cycle' => 'string',
        'resources' => '\Swagger\Client\Model\ResourceBean[]',
        'revision_number' => 'int',
        'timeout' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'api' => null,
        'api_broken' => null,
        'creation_date' => 'date-time',
        'deployments' => null,
        'destination' => null,
        'id' => 'int64',
        'interceptors' => null,
        'life_cycle' => null,
        'resources' => null,
        'revision_number' => 'int32',
        'timeout' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'api' => 'api',
        'api_broken' => 'apiBroken',
        'creation_date' => 'creationDate',
        'deployments' => 'deployments',
        'destination' => 'destination',
        'id' => 'id',
        'interceptors' => 'interceptors',
        'life_cycle' => 'lifeCycle',
        'resources' => 'resources',
        'revision_number' => 'revisionNumber',
        'timeout' => 'timeout'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'api' => 'setApi',
        'api_broken' => 'setApiBroken',
        'creation_date' => 'setCreationDate',
        'deployments' => 'setDeployments',
        'destination' => 'setDestination',
        'id' => 'setId',
        'interceptors' => 'setInterceptors',
        'life_cycle' => 'setLifeCycle',
        'resources' => 'setResources',
        'revision_number' => 'setRevisionNumber',
        'timeout' => 'setTimeout'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'api' => 'getApi',
        'api_broken' => 'getApiBroken',
        'creation_date' => 'getCreationDate',
        'deployments' => 'getDeployments',
        'destination' => 'getDestination',
        'id' => 'getId',
        'interceptors' => 'getInterceptors',
        'life_cycle' => 'getLifeCycle',
        'resources' => 'getResources',
        'revision_number' => 'getRevisionNumber',
        'timeout' => 'getTimeout'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const LIFE_CYCLE_DRAFT = 'DRAFT';
    const LIFE_CYCLE_AVAILABLE = 'AVAILABLE';
    const LIFE_CYCLE_RETIRED = 'RETIRED';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getLifeCycleAllowableValues()
    {
        return [
            self::LIFE_CYCLE_DRAFT,
            self::LIFE_CYCLE_AVAILABLE,
            self::LIFE_CYCLE_RETIRED,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['api'] = isset($data['api']) ? $data['api'] : null;
        $this->container['api_broken'] = isset($data['api_broken']) ? $data['api_broken'] : null;
        $this->container['creation_date'] = isset($data['creation_date']) ? $data['creation_date'] : null;
        $this->container['deployments'] = isset($data['deployments']) ? $data['deployments'] : null;
        $this->container['destination'] = isset($data['destination']) ? $data['destination'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['interceptors'] = isset($data['interceptors']) ? $data['interceptors'] : null;
        $this->container['life_cycle'] = isset($data['life_cycle']) ? $data['life_cycle'] : null;
        $this->container['resources'] = isset($data['resources']) ? $data['resources'] : null;
        $this->container['revision_number'] = isset($data['revision_number']) ? $data['revision_number'] : null;
        $this->container['timeout'] = isset($data['timeout']) ? $data['timeout'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        $allowed_values = $this->getLifeCycleAllowableValues();
        if (!in_array($this->container['life_cycle'], $allowed_values)) {
            $invalid_properties[] = sprintf(
                "invalid value for 'life_cycle', must be one of '%s'",
                implode("', '", $allowed_values)
            );
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        $allowed_values = $this->getLifeCycleAllowableValues();
        if (!in_array($this->container['life_cycle'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets api
     * @return \Swagger\Client\Model\API
     */
    public function getApi()
    {
        return $this->container['api'];
    }

    /**
     * Sets api
     * @param \Swagger\Client\Model\API $api
     * @return $this
     */
    public function setApi($api)
    {
        $this->container['api'] = $api;

        return $this;
    }

    /**
     * Gets api_broken
     * @return bool
     */
    public function getApiBroken()
    {
        return $this->container['api_broken'];
    }

    /**
     * Sets api_broken
     * @param bool $api_broken
     * @return $this
     */
    public function setApiBroken($api_broken)
    {
        $this->container['api_broken'] = $api_broken;

        return $this;
    }

    /**
     * Gets creation_date
     * @return \DateTime
     */
    public function getCreationDate()
    {
        return $this->container['creation_date'];
    }

    /**
     * Sets creation_date
     * @param \DateTime $creation_date
     * @return $this
     */
    public function setCreationDate($creation_date)
    {
        $this->container['creation_date'] = $creation_date;

        return $this;
    }

    /**
     * Gets deployments
     * @return \Swagger\Client\Model\DeploymentBean[]
     */
    public function getDeployments()
    {
        return $this->container['deployments'];
    }

    /**
     * Sets deployments
     * @param \Swagger\Client\Model\DeploymentBean[] $deployments
     * @return $this
     */
    public function setDeployments($deployments)
    {
        $this->container['deployments'] = $deployments;

        return $this;
    }

    /**
     * Gets destination
     * @return string
     */
    public function getDestination()
    {
        return $this->container['destination'];
    }

    /**
     * Sets destination
     * @param string $destination
     * @return $this
     */
    public function setDestination($destination)
    {
        $this->container['destination'] = $destination;

        return $this;
    }

    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets interceptors
     * @return \Swagger\Client\Model\InterceptorBean[]
     */
    public function getInterceptors()
    {
        return $this->container['interceptors'];
    }

    /**
     * Sets interceptors
     * @param \Swagger\Client\Model\InterceptorBean[] $interceptors
     * @return $this
     */
    public function setInterceptors($interceptors)
    {
        $this->container['interceptors'] = $interceptors;

        return $this;
    }

    /**
     * Gets life_cycle
     * @return string
     */
    public function getLifeCycle()
    {
        return $this->container['life_cycle'];
    }

    /**
     * Sets life_cycle
     * @param string $life_cycle
     * @return $this
     */
    public function setLifeCycle($life_cycle)
    {
        $allowed_values = $this->getLifeCycleAllowableValues();
        if (!is_null($life_cycle) && !in_array($life_cycle, $allowed_values)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'life_cycle', must be one of '%s'",
                    implode("', '", $allowed_values)
                )
            );
        }
        $this->container['life_cycle'] = $life_cycle;

        return $this;
    }

    /**
     * Gets resources
     * @return \Swagger\Client\Model\ResourceBean[]
     */
    public function getResources()
    {
        return $this->container['resources'];
    }

    /**
     * Sets resources
     * @param \Swagger\Client\Model\ResourceBean[] $resources
     * @return $this
     */
    public function setResources($resources)
    {
        $this->container['resources'] = $resources;

        return $this;
    }

    /**
     * Gets revision_number
     * @return int
     */
    public function getRevisionNumber()
    {
        return $this->container['revision_number'];
    }

    /**
     * Sets revision_number
     * @param int $revision_number
     * @return $this
     */
    public function setRevisionNumber($revision_number)
    {
        $this->container['revision_number'] = $revision_number;

        return $this;
    }

    /**
     * Gets timeout
     * @return string
     */
    public function getTimeout()
    {
        return $this->container['timeout'];
    }

    /**
     * Sets timeout
     * @param string $timeout
     * @return $this
     */
    public function setTimeout($timeout)
    {
        $this->container['timeout'] = $timeout;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


